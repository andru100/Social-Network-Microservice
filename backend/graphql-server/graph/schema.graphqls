# GraphQL schema example
#
# https://gqlgen.com/getting-started/


#scalar Upload
scalar Time
scalar Int64
scalar Int32
#scalar Map

type Query {
  Chkauth(input: JwtdataInput!) : Authd
  GetAllComments(input: String!) : MongoFields
  GetUserComments(input: String!) : MongoFields
}

type Mutation {
  SignIn(input: UsrsigninInput!) : Jwtdata
  SignUp(input: NewUserDataInput!) : Jwtdata
  LikeComment(input: SendLikeInput!) : MongoFields
  ReplyComment(input: ReplyCommentInput!) : MongoFields
  NewComment(input: SendCmtInput!) : MongoFields
  #PostFile(file: Upload!): MongoFields
  UpdateBio(input: UpdateBioInput!) : MongoFields
}

input MutationInput {
  name: String!
  ID: String!
}

type Authd  {
	AuthdUser: String!
}

# type AuthCheck  {
# 	AuthdUser: String!
# }

type GetUserCmts  {
	Page:     String! 
	Username: String! 
}

type Claims  {
	Username: String!
	#jwt.StandardClaims
}

type Jwtdata  { 
	Token: String! 
}

# type Qry  {
#   Page:     String! 
#   UserName: String! 
# }

type MsgCmts  {
	Username: String! 
	Comment:  String! 
	Profpic:  String!
}

type Likes  {
	Username: String! 
	Profpic:  String!
}

#Holds retrived mongo doc to check signin password
# type PasswordChk  {
# 	Key:      String!            
# 	#ID:       primitive.Object#ID 
# 	ID: 	  ID!
# 	Username: String!             
# 	Password: String!   
# }

type PostData  {
	Username:    String!    	
	SessionUser: String!    
	MainCmt:     String!   
	PostNum:     Int32!      
	Time:        String!   
	TimeStamp:   Int64! 
	Date:        String!    
	Comments:    [MsgCmts!]!  #
	Likes:       [Likes!]!  #
}

# type NewUserData  {
# 	Username:       String!     
# 	Password:       String! 
# 	Email:          String!  
# }

type Usrsignin  {
	Username:       String!     
	Password:       String!    
	Email:          String!    
	Bio:            String!   
	Photos:         [String!]!
	LastCommentNum: Int32!     
	Posts:          [PostData!]! 
}

#  to hold retrived mongo doc
type MongoFields  {
	Key:            String!            
	#ID:             primitive.Object#ID
	ID:				ID!
	Username:       String!             
	Password:       String!            
	Email:          String!            
	Bio:            String!           
	Profpic:        String!   
	Photos:         [String!]!         
	LastCommentNum: Int32!             
	Posts:          [PostData!]!       #   
}

# with data inputs of incoming json object- used to find out what input of query is needed
# type Stdput  {
# 	Username:   String!   
# 	UpdateInput: String!   
# 	IsReply:    String!  
# 	LikeSent:   Likes! #  
# 	ReplyCmt:   MsgCmts! #  
# 	PostIndx:   Int32!      
# 	Key2updt:   String!  
# 	Value2updt: PostData! # 
# }




input JwtdataInput  { 
	Token: String! 
}


input NewUserDataInput  {
	Username:       String!     
	Password:       String! 
	Email:          String!  
}

input UsrsigninInput  {
	Username:       String!     
	Password:       String!
}


# with data inputs of incoming json object- used to find out what input of query is needed
# input StdputInput  {
# 	Username:   String!   
# 	Updateinput: String!   
# 	IsReply:    String!  
# 	LikeSent:   Likes #  
# 	ReplyCmt:   MsgCmts #  
# 	PostIndx:   Int32      
# 	Key2updt:   String!  
# 	Value2updt: PostData # 
# }

input SendLikeInput  {
	Username:   String!  
	LikedBy:   String! #  
	LikeByPic:   String! #  
	PostIndx:   Int32!,
	ReturnPage: String!,
}

input SendCmtInput  {
	Username:    String!    
	SessionUser: String!    
	MainCmt:     String!  
	Time:        String!   
	TimeStamp:   Int64!    
	Date:        String! 
	ReturnPage: String!     
}

input ReplyCommentInput  {
	AuthorUsername:   String! 
	ReplyUsername: String! 
	ReplyComment:  String! 
	ReplyProfpic:  String!
	PostIndx:   Int32!   
	ReturnPage: String! 
}

input UpdateBioInput  {
	Username: String! 
	Bio:  String!
}

# input UploadInput {
# 	#Username: String!
# 	File: Upload!
# 	#Type: String!
# }

type Security {
	Username: String! 
	Password: String! 
	OTP: 	OTP!
}	

type OTP {
	OTP: String
	OTPExpire: Time
}	

