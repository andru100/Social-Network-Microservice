package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"
	"log"
	"encoding/json"

	//"golang.org/x/net/context"
	"google.golang.org/grpc"
	//"google.golang.org/protobuf"

	//"github.com/99designs/gqlgen/graphql"
	GrpcModel "github.com/andru100/Social-Network-Microservice/backend/GraphQL-Server/model"
	model "github.com/andru100/Social-Network-Microservice/backend/GraphQL-Server/graph/model1"
	//"github.com/andru100/Graphql-Social-Network/graph/social"
)

// Signin is the resolver for the Signin field.
func (r *mutationResolver) SignIn(ctx context.Context, input model.UsrsigninInput) (*model.Jwtdata, error) {
	
	var conn *grpc.ClientConn
	
	conn, err := grpc.Dial(":4001", grpc.WithInsecure())
	
	if err != nil {
		log.Fatalf("did not connect: %s", err)
	}
	defer conn.Close()

	//gql2rpc := GrpcModel.JwtdataInput(input)

	// data, err := protobuf.Marshal(&gql2rpc)
    // if err != nil {
    //     log.Fatal("marshaling error: ", err)
    // }

	c := GrpcModel.NewSocialGrpcClient(conn)

	test := GrpcModel.UsrsigninInput{Username: input.Username, Password: input.Password }

	result, err := c.SignIn(context.Background(), &test)
	
	if err != nil {
		return nil, err
	}
	
	convertback := model.Jwtdata{}

	wrappedback, _ := json.Marshal(result)
    _ = json.Unmarshal(wrappedback,&convertback)
	
	
	return &convertback, err
}

// SignUp is the resolver for the SignUp field.
func (r *mutationResolver) SignUp(ctx context.Context, input model.NewUserDataInput) (*model.Jwtdata, error) {
	
	var conn *grpc.ClientConn
	
	conn, err := grpc.Dial(":4002", grpc.WithInsecure())
	
	if err != nil {
		log.Fatalf("did not connect: %s", err)
	}
	defer conn.Close()

	c := GrpcModel.NewSocialGrpcClient(conn)

	test := GrpcModel.NewUserDataInput{Username: input.Username, Password: input.Password, Email: input.Username}

	result, err := c.SignUp(context.Background(), &test)
	
	if err != nil {
		return nil, err
	}
	
	convert := model.Jwtdata{}

	wrapped, _ := json.Marshal(result)
    _ = json.Unmarshal(wrapped,&convert)
	
	return &convert, err
	panic(fmt.Errorf("not implemented: Signin - Signin"))
}

// LikeComment is the resolver for the LikeComment field.
func (r *mutationResolver) LikeComment(ctx context.Context, input model.SendLikeInput) (*model.MongoFields, error) {
	
	var conn *grpc.ClientConn
	
	conn, err := grpc.Dial(":4003", grpc.WithInsecure())
	
	if err != nil {
		log.Fatalf("did not connect: %s", err)
	}
	defer conn.Close()

	c := GrpcModel.NewSocialGrpcClient(conn)

	convert := GrpcModel.SendLikeInput{}

	wrapped, _ := json.Marshal(input)
    _ = json.Unmarshal(wrapped,&convert)


	result, err := c.LikeComment(context.Background(), &convert)
	
	if err != nil {
		return nil, err
	}

	convertback := model.MongoFields{}

	wrappedback, _ := json.Marshal(result)
    _ = json.Unmarshal(wrappedback,&convertback)
	
	
	return &convertback, err
	
	panic(fmt.Errorf("not implemented: LikeComment - LikeComment"))
}

// ReplyComment is the resolver for the ReplyComment field.
func (r *mutationResolver) ReplyComment(ctx context.Context, input model.ReplyCommentInput) (*model.MongoFields, error) {
	
	var conn *grpc.ClientConn
	
	conn, err := grpc.Dial(":4004", grpc.WithInsecure())
	
	if err != nil {
		log.Fatalf("did not connect: %s", err)
	}
	defer conn.Close()

	c := GrpcModel.NewSocialGrpcClient(conn)

	convert := GrpcModel.ReplyCommentInput{}

	wrapped, _ := json.Marshal(input)
    _ = json.Unmarshal(wrapped,&convert)


	result, err := c.ReplyComment(context.Background(), &convert)
	
	if err != nil {
		return nil, err
	}
	
	
	convertback := model.MongoFields{}

	wrappedback, _ := json.Marshal(result)
    _ = json.Unmarshal(wrappedback,&convertback)
	
	
	return &convertback, err
	
}

// NewComment is the resolver for the NewComment field.
func (r *mutationResolver) NewComment(ctx context.Context, input model.SendCmtInput) (*model.MongoFields, error) {
	
	var conn *grpc.ClientConn
	
	conn, err := grpc.Dial(":4005", grpc.WithInsecure())
	
	if err != nil {
		log.Fatalf("did not connect: %s", err)
	}
	defer conn.Close()

	c := GrpcModel.NewSocialGrpcClient(conn)

	convert := GrpcModel.SendCmtInput{}

	wrapped, _ := json.Marshal(input)
    _ = json.Unmarshal(wrapped,&convert)


	result, err := c.NewComment(context.Background(), &convert)
	
	if err != nil {
		return nil, err
	}
	
	
	convertback := model.MongoFields{}

	wrappedback, _ := json.Marshal(result)
    _ = json.Unmarshal(wrappedback,&convertback)
	
	
	return &convertback, err
	
	
}

// PostFile is the resolver for the PostFile field.
// func (r *mutationResolver) PostFile(ctx context.Context, file graphql.Upload) (*model.MongoFields, error) {
// 	fmt.Println("in postfile")
// 	result, err := social.PostFile(file)
// 	if err != nil {
// 		fmt.Println("post file err", err)
// 		return nil, err
// 	}
// 	return result, err
// 	panic(fmt.Errorf("not implemented: PostFile - PostFile"))
// }

// UpdateBio is the resolver for the UpdateBio field.
func (r *mutationResolver) UpdateBio(ctx context.Context, input model.UpdateBioInput) (*model.MongoFields, error) {
	
	var conn *grpc.ClientConn
	
	conn, err := grpc.Dial(":4006", grpc.WithInsecure())
	
	if err != nil {
		log.Fatalf("did not connect: %s", err)
	}
	defer conn.Close()

	c := GrpcModel.NewSocialGrpcClient(conn)

	convert := GrpcModel.UpdateBioInput{}

	wrapped, _ := json.Marshal(input)
    _ = json.Unmarshal(wrapped,&convert)


	result, err := c.UpdateBio(context.Background(), &convert)
	
	if err != nil {
		return nil, err
	}
	
	convertback := model.MongoFields{}

	wrappedback, _ := json.Marshal(result)
    _ = json.Unmarshal(wrappedback,&convertback)
	
	
	return &convertback, err
}

// Chkauth is the resolver for the Chkauth field.
func (r *queryResolver) Chkauth(ctx context.Context, input model.JwtdataInput) (*model.Authd, error) {
	
	var conn *grpc.ClientConn
	conn, err := grpc.Dial(":4007", grpc.WithInsecure())
	if err != nil {
		log.Fatalf("did not connect: %s", err)
	}
	defer conn.Close()

	//gql2rpc := GrpcModel.JwtdataInput(input)

	// data, err := protobuf.Marshal(&gql2rpc)
    // if err != nil {
    //     log.Fatal("marshaling error: ", err)
    // }

	c := GrpcModel.NewSocialGrpcClient(conn)

	test := GrpcModel.JwtdataInput{Token: input.Token}

	result, err := c.Chkauth(context.Background(), &test)
	
	if err != nil {
		return nil, err
	}
	
	convertback := model.Authd{}

	wrappedback, _ := json.Marshal(result)
    _ = json.Unmarshal(wrappedback,&convertback)
	
	
	return &convertback, err


	panic(fmt.Errorf("not implemented: Chkauth - Chkauth"))
}

// GetAllComments is the resolver for the GetAllComments field.
func (r *queryResolver) GetAllComments(ctx context.Context, username string) (*model.MongoFields, error) {
	
	var conn *grpc.ClientConn
	
	conn, err := grpc.Dial(":4008", grpc.WithInsecure())
	
	if err != nil {
		log.Fatalf("did not connect: %s", err)
	}
	defer conn.Close()

	c := GrpcModel.NewSocialGrpcClient(conn)

	result, err := c.GetAllComments(context.Background(), &GrpcModel.GetComments{Username: username})
	
	if err != nil {
		return nil, err
	}
	
	convertback := model.MongoFields{}

	wrappedback, _ := json.Marshal(result)
    _ = json.Unmarshal(wrappedback,&convertback)
	
	
	return &convertback, err
	
}

// GetUserComments is the resolver for the GetUserComments field.
func (r *queryResolver) GetUserComments(ctx context.Context, username string) (*model.MongoFields, error) {
	
	var conn *grpc.ClientConn
	
	conn, err := grpc.Dial(":4009", grpc.WithInsecure())
	
	if err != nil {
		log.Fatalf("did not connect: %s", err)
	}
	defer conn.Close()

	c := GrpcModel.NewSocialGrpcClient(conn)

	result, err := c.GetUserComments(context.Background(), &GrpcModel.GetComments{Username: username})
	
	if err != nil {
		return nil, err
	}
	
	convertback := model.MongoFields{}

	wrappedback, _ := json.Marshal(result)
    _ = json.Unmarshal(wrappedback,&convertback)
	
	
	return &convertback, err
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }