[{"/home/dev/go/Social-Network-Microservice/frontend-react/src/index.js":"1","/home/dev/go/Social-Network-Microservice/frontend-react/src/App.js":"2","/home/dev/go/Social-Network-Microservice/frontend-react/src/routes/SignUp.jsx":"3","/home/dev/go/Social-Network-Microservice/frontend-react/src/routes/SignIn.jsx":"4","/home/dev/go/Social-Network-Microservice/frontend-react/src/routes/SendData.jsx":"5","/home/dev/go/Social-Network-Microservice/frontend-react/src/routes/chkAuth.jsx":"6","/home/dev/go/Social-Network-Microservice/frontend-react/src/routes/UpdateHybrid.jsx":"7","/home/dev/go/Social-Network-Microservice/frontend-react/src/routes/SigninHybrid.jsx":"8","/home/dev/go/Social-Network-Microservice/frontend-react/src/routes/Home.jsx":"9","/home/dev/go/Social-Network-Microservice/frontend-react/src/routes/RequestOTP.jsx":"10","/home/dev/go/Social-Network-Microservice/frontend-react/src/routes/Logout.jsx":"11"},{"size":629,"mtime":1682106533720,"results":"12","hashOfConfig":"13"},{"size":285,"mtime":1682106952619,"results":"14","hashOfConfig":"13"},{"size":11420,"mtime":1682101439545,"results":"15","hashOfConfig":"13"},{"size":5594,"mtime":1681385040396,"results":"16","hashOfConfig":"13"},{"size":652,"mtime":1680518717744,"results":"17","hashOfConfig":"13"},{"size":789,"mtime":1679782752164,"results":"18","hashOfConfig":"13"},{"size":12372,"mtime":1682166332366,"results":"19","hashOfConfig":"13"},{"size":6047,"mtime":1681384222778,"results":"20","hashOfConfig":"13"},{"size":34837,"mtime":1682168985965,"results":"21","hashOfConfig":"13"},{"size":652,"mtime":1680526643606,"results":"22","hashOfConfig":"13"},{"size":283,"mtime":1680311135433,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"rzenf7",{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"27"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"27"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"27"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/dev/go/Social-Network-Microservice/frontend-react/src/index.js",[],[],[],"/home/dev/go/Social-Network-Microservice/frontend-react/src/App.js",["61"],[],"import React from 'react';\nimport './css/purified.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport ThemeProvider from 'react-bootstrap/ThemeProvider'\nimport SignIn from './routes/SignIn';\n\nfunction App() {\n\n  return (\n  <div>\n    <SignIn/>\n  </div>\n  );\n}\n\nexport default App","/home/dev/go/Social-Network-Microservice/frontend-react/src/routes/SignUp.jsx",["62","63","64"],[],"import React from 'react';\nimport SendData from './SendData';\nimport { useAlert } from \"react-alert\";\nimport RequestOTP from './RequestOTP';\nimport Home from './Home';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport SignUp from './SignUp';\nimport SignIn from './SignIn';\n\n\nexport default function RenderSignUp () {\n\n\tconst alert = useAlert()\n\tconst [page, setPage] = React.useState(\"default\");\n\tconst [rendertype, setRenderType] = React.useState(\"username\"); \n\tconst [address, setaddress] = React.useState(\"\");\n\tconst [mfachoice, setMfaChoice] = React.useState(\"unaassigned\");\n\tconst [userdata, setUserData] = React.useState({\n    Username: \"\",\n    Password: \"\",\n  });\n\n  \n  async function SignUp () { // sends username, password, email from input, backend then creates s3 bucket and stores details on mongodb\n\tconsole.log(\"signup rendered mfa choicce is:\", mfachoice)\n    let signupdata = userdata\n\n\trendertype.includes(\"confirm\") ? signupdata.RequestType = \"stage2\" : signupdata.RequestType = rendertype\n    \n\n    if (rendertype === \"username\") {\n\t\tconst username = document.getElementById('username').value;\n      const password = document.getElementById('password').value;\n      signupdata.Username = username\n      signupdata.Password = password\n\t}\n\tif (rendertype === \"email\") {\n\t\tconst email = document.getElementById('email').value;\n\t\tsignupdata.Email = email\n\t}\n\n\tif (rendertype === \"sms\") {\n\t\tconst mobile = document.getElementById('sms').value;\n\t\tsignupdata.Mobile = mobile\n\t}\n\n\tif (rendertype === \"confirmsms\") {\n\t\tconst sms = document.getElementById('smsotp').value;\n\t\tsignupdata.OTP_Mobile = sms\n\t}\n\n\tif (rendertype === \"confirmemail\") {\n\t\tconst email = document.getElementById('emailotp').value;\n\t\tsignupdata.OTP_Email = email\n\t}\n\n\n\tif (rendertype === \"oauth\") {\n\t\tconst passcode = document.getElementById('oauth').value;\n\t\tsignupdata.Oauth = passcode\n\t}\n\n\tif (rendertype === \"setsecurity\") {\n\t\t//const mfa = document.getElementById('mfa').value;\n\t\tsignupdata.Token = mfachoice\n\t}\n\tlet gqlRequest = \"mutation SignUp ($data: SecurityCheckInput!){ SignUp(input: $data) { Token AuthType MobClue EmailClue } }\"\n\t\n\tlet response = await SendData(gqlRequest, {data:signupdata}, 'signup')\n\t\n\tif ( \"errors\" in response ){ // if password is a match redirect to profile page\n\tconsole.log(\"error procceeding with sign up\", response.errors[0].message )\n\talertError(response.errors[0].message)\n\t\n\t\n\t} else if ( response.data.SignUp.Token === \"proceed\" ){ // if password is a match redirect to profile page\n\t\tsetaddress([response.data.SignUp.MobClue, response.data.SignUp.EmailClue])\n\t\tsignupdata.RequestType = response.data.SignUp.AuthType\n\t\tsetUserData(signupdata)\n\t\tsetRenderType(response.data.SignUp.AuthType)\n\t} else {\n\t\talert.show(\"Welcome to the club\")\n\t\tlocalStorage.setItem('jwt_token', response.data.SignUp.Token) // Store JWT in storage\n\t\tsetPage(\"home\")\n\t}\n  }\n\n  function alertError(error){\n\t\tconst delimiter = '= '\n\t\tconst start = 2\n\t\tconst tokens = error.split(delimiter).slice(start)\n\t\tconst result = tokens.join(delimiter); // those.that\n\t\talert.show(result)\n\t}\n\n  function SignIn () {\n    setPage(\"signin\")\n  }\n\n  function CheckUsername () {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div className=\"p-t-31 p-b-9\">\n\t\t\t\t\t<span className=\"txt1\">\n\t\t\t\t\t\tChoose your username\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"wrap-input100 validate-input\" data-validate = \"username is required\">\n\t\t\t\t\t<input className=\"input100\" type=\"text\" name=\"pass\" id=\"username\"/>\n\t\t\t\t\t<span className=\"focus-input100\"></span>\n\t\t\t\t</div>\n        <div className=\"p-t-13 p-b-9\">\n\t\t\t\t<span className=\"txt1\">\n\t\t\t\t\tPassword\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t\t<div className=\"wrap-input100 validate-input\" data-validate = \"Password is required\">\n\t\t\t\t<input className=\"input100\" type=\"password\" name=\"pas\" id=\"pass1\" />\n\t\t\t\t<span className=\"focus-input100\"></span>\n\t\t\t</div>\n      <div className=\"p-t-13 p-b-9\">\n\t\t\t\t<span className=\"txt1\">\n\t\t\t\t\tConfirm Password\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t\t<div className=\"wrap-input100 validate-input\" data-validate = \"Password is required\">\n\t\t\t\t<input className=\"input100\" type=\"password\" name=\"pas\" id=\"password\" />\n\t\t\t\t<span className=\"focus-input100\"></span>\n\t\t\t</div>\n\t\t\t\t\n\t\t\t\t\n\t\t\t</>\n\t\t)\n\t}\n\n  function CheckEmail () {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div className=\"p-t-31 p-b-9\">\n\t\t\t\t\t<span className=\"txt1\">\n\t\t\t\t\t\tEnter your email address\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"wrap-input100 validate-input\" data-validate = \"email is required\">\n\t\t\t\t\t<input className=\"input100\" type=\"text\" name=\"pass\" id=\"email\"/>\n\t\t\t\t\t<span className=\"focus-input100\"></span>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t\n\t\t\t</>\n\t\t)\n\t}\n\n  function CheckMobile () {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div className=\"p-t-31 p-b-9\">\n\t\t\t\t\t<span className=\"txt1\">\n\t\t\t\t\t\tEnter your mobile no.\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"wrap-input100 validate-input\" data-validate = \"mobile is required\">\n\t\t\t\t\t<input className=\"input100\" type=\"text\" name=\"pass\" id=\"sms\"/>\n\t\t\t\t\t<span className=\"focus-input100\"></span>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t\n\t\t\t</>\n\t\t)\n\t}\n\n  function ConfirmSms () {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div className=\"p-t-31 p-b-9\">\n\t\t\t\t\t<span className=\"txt1\">\n\t\t\t\t\t\t{\"Enter code sent to *******\" + address[0]}\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"wrap-input100 validate-input\" data-validate = \"verification code is required\">\n\t\t\t\t\t<input className=\"input100\" type=\"text\" name=\"mobileotp\" id=\"smsotp\"/>\n\t\t\t\t\t<span className=\"focus-input100\"></span>\n\t\t\t\t</div>\n\t\t\t\t<div >\n\t\t\t\t\t<button  type=\"button\" onClick={() => ResendOTP(\"!sms\")}>\n\t\t\t\t\t\tresend code\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"container-login100-form-btn m-t-17\">\n\t\t\t\t</div>\n\t\t\t</>\n\t\t)\n\t}\n\n\tfunction ConfirmEmail () {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div className=\"p-t-31 p-b-9\">\n\t\t\t\t\t<span className=\"txt1\">\n\t\t\t\t\t\t{\"Enter code sent to email \" + address[1] + \"*******\"}\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"wrap-input100 validate-input\" data-validate = \"verification code is required\">\n\t\t\t\t\t<input className=\"input100\" type=\"text\" name=\"emailotp\" id=\"emailotp\"/>\n\t\t\t\t\t<span className=\"focus-input100\"></span>\n\t\t\t\t</div>\n\t\t\t\t<div >\n\t\t\t\t\t<button  type=\"button\" onClick={() => ResendOTP(\"!email\")}>\n\t\t\t\t\t\tresend code\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t</>\n\t\t)\n\t}\n\n\tfunction AuthenticationSelector() {\n\t  \n\t\tconst SMSAuth = () => {\n\t\t\t\n\t\t  setMfaChoice(\"sms\");\n\t\t  console.log(\"mfa is now\", mfachoice)\n\t\t};\n\t  \n\t\tconst EmailAuth = () => {\n\t\t\t\n\t\t  setMfaChoice(\"email\");\n\t\t  console.log(\"mfa is now\", mfachoice)\n\t\t};\n\n\t\tconst PasswordAuth = () => {\n\t\t\t\n\t\t\tsetMfaChoice(\"password\");\n\t\t\tconsole.log(\"mfa is now\", mfachoice)\n\t\t}\n\n\t\tconst HighSecAuth = () => {\n\t\t\t\n\t\t\tsetMfaChoice(\"high\");\n\t\t\tconsole.log(\"mfa is now\", mfachoice)\n\t\t}\n\n\t\tlet smsbox\n\t\tlet emailbox\n\t\tlet passwordbox\n\t\tlet highsecbox\n\n\t\tmfachoice === \"sms\" ? smsbox = {backgroundImage: 'linear-gradient(47deg, cyan, magenta)', textAlign: 'center'} : smsbox = {backgroundColor: 'rgba(255, 255, 255, 1)', textAlign: 'center'} ;\n\t\tmfachoice === \"email\" ? emailbox = {backgroundImage: 'linear-gradient(47deg, cyan, magenta)', textAlign: 'center'} : emailbox = {backgroundColor: 'rgba(255, 255, 255, 1)', textAlign: 'center'} ;\n\t\tmfachoice === \"password\" ? passwordbox = {backgroundImage: 'linear-gradient(47deg, cyan, magenta)', textAlign: 'center'} : passwordbox = {backgroundColor: 'rgba(255, 255, 255, 1)', textAlign: 'center'} ;\n\t\tmfachoice === \"high\" ?  highsecbox = {backgroundImage: 'linear-gradient(47deg, cyan, magenta)', textAlign: 'center'} : highsecbox = {backgroundColor: 'rgba(255, 255, 255, 1)', textAlign: 'center'} ;\n\n\n\t  \n\t\treturn (\n\t\t\t<>\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t<div style={{textAlign: 'center', marginLeft: \"47px\", marginBottom: \"30px\"}} >\n\t\t\t\t\t\t\t\t<span className=\"txt1\" style={{fontSize: \"20px\"}} >\n\t\t\t\t\t\t\t\t\t{\"Select your authentication method\"}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row>\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t<div className=\"mfa-box\" style={passwordbox} onClick={() => { PasswordAuth()}}>\n\t\t\t\t\t\t\t\t<span className=\"txt1\">\n\t\t\t\t\t\t\t\t\t{\"Password only\"}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<i class=\"fa fa-unlock-alt fa-5x\" style={{marginTop: \"5px\"}} aria-hidden=\"true\"></i>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t<div className=\"mfa-box\" style={smsbox} onClick={() => SMSAuth()}>\n\t\t\t\t\t\t\t\t<span className=\"txt1\">\n\t\t\t\t\t\t\t\t\t{\"SMS MFA\"}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<i class=\"fa fa-mobile fa-5x\" style={{marginTop: \"5px\"}} aria-hidden=\"true\"></i>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row>\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t<div className=\"mfa-box\" style={emailbox} onClick={() => EmailAuth()}>\n\t\t\t\t\t\t\t\t<span className=\"txt1\">\n\t\t\t\t\t\t\t\t\t{\"Email MFA\"}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<i class=\"fa fa-envelope fa-5x\" style={{marginTop: \"5px\"}} aria-hidden=\"true\"></i>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t<div className=\"mfa-box\" style={highsecbox} onClick={() => HighSecAuth()}>\n\t\t\t\t\t\t\t\t<span className=\"txt1\">\n\t\t\t\t\t\t\t\t\t{\"High Security\"}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t<div> \n\t\t\t\t\t\t\t\t\t<i class=\"fa fa-mobile fa-4x\" style={{marginTop: \"5px\", marginRight: \"20px\"}} aria-hidden=\"true\"></i>\n\t\t\t\t\t\t\t\t\t<i class=\"fa fa-envelope fa-4x\" style={{marginTop: \"5px\"}} aria-hidden=\"true\"></i>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row>\n\t\t\t\t\n\t\t\t</>\n\t\t);\n\t}\n\n  function Verify () {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t\n\t\t\t\t<div className=\"container-login100-form-btn m-t-17\">\n\t\t\t\t</div>\n\t\t\t\t<div className=\"container-login100-form-btn m-t-17\">\n\t\t\t\t\t<button className=\"login100-form-btn\" type=\"button\" onClick={() =>SignUp()}>\n\t\t\t\t\t\tverify\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"w-full text-center p-t-55\">\n\t\t\t\t\t<button onClick={() => setPage(\"signin\")}>Back to sign in</button>\n\t\t\t\t</div>\n\t\t\t</>\n\t\t)\n\t}\n\n  async function ResendOTP (requestType) {\n\t\tRequestOTP(userdata.Username, requestType, \"temp\").then((response) => {\n\t\t\tif (( \"errors\" in response )) {\n\t\t\t\tconsole.log(\"error bak from otp request\", response.errors[0].message)\n\t\t\t\talertError(response.errors[0].message)\n\t\t\t}\n\t\t})\n\t}\n\n\t// function ChangeAuthType () {\n\n\t// \tconsole.log(\"change auth type called\", setRenderType)\n\t// \t//fun is only called when type is sms as button only shown on that page. added switch from email for future\n\t// \tif (rendertype === \"sms\") {\n\t// \t\tResendOTP(\"!email\")\n\t// \t\tsetRenderType(\"email\")\n\t\t\t\n\t// \t} else {\n\t// \t\tResendOTP(\"!sms\")\n\t// \t\tsetRenderType(\"sms\")\n\t\t\t\n\t// \t}\n\t// }\n\n\n\n  function LandingPage () {\n    return (\n      <>\n\t  \t<div className=\"limiter\">\n\t\t\t<div className=\"container-login100\" >\n\t\t\t\t<div className=\"wrap-login100 p-l-110 p-r-110 p-t-62 p-b-33\">\n\t\t\t\t\t<form className=\"login100-form validate-form flex-sb flex-w\">\n\t\t\t\t\t\t{rendertype === \"username\" && <CheckUsername />}\n\t\t\t\t\t\t{rendertype === \"email\" && <CheckEmail />}\n\t\t\t\t\t\t{rendertype === \"sms\" && <CheckMobile />}\n\t\t\t\t\t\t{rendertype === \"confirmsms\" && <ConfirmSms />}\n\t\t\t\t\t\t{rendertype === \"confirmemail\" && <ConfirmEmail />}\n\t\t\t\t\t\t{rendertype === \"setsecurity\" && <AuthenticationSelector />}\n\t\t\t\t\t\t<Verify />\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n      </>\n    )\n  }\n  \n\n  return (\n    <>\n   \n      {page === \"default\" && <LandingPage/>}\n\t  {page === \"home\" && <Home sessionuser={userdata.Username} page={\"home\"} viewing={userdata.Username} />}\n      {page === \"signin\" && <SignIn/>}\n\t  {page === \"signup\" && <SignUp/>}\n\n    \n    </> \n  );\n\n  \n\n}","/home/dev/go/Social-Network-Microservice/frontend-react/src/routes/SignIn.jsx",[],[],"/home/dev/go/Social-Network-Microservice/frontend-react/src/routes/SendData.jsx",[],[],"/home/dev/go/Social-Network-Microservice/frontend-react/src/routes/chkAuth.jsx",[],[],"/home/dev/go/Social-Network-Microservice/frontend-react/src/routes/UpdateHybrid.jsx",["65","66"],[],"/home/dev/go/Social-Network-Microservice/frontend-react/src/routes/SigninHybrid.jsx",["67","68","69","70","71"],[],"import React from 'react';\nimport { useAlert } from \"react-alert\";\nimport SendData from './SendData';\nimport RequestOTP from './RequestOTP';\nimport Home from './Home';\n\nexport default function SigninHybrid (props) {\n\n\tconst [page, setPage] = React.useState(\"default\");\n\tconst [username, setUsername] = React.useState(props.username);\n\tconst [password, setPassword] = React.useState(props.password);\n\tconst [authtype, setAuthType] = React.useState(props.authtype);\n\tconst [address, setAddress] = React.useState(props.address);\n\tconst [rendertype, setRenderType] = React.useState(props.authtype);\n\tconst [userdata, setUserdata] = React.useState({\n\t\tUsername: props.username,\n\t\tPassword: props.password,\n\t\tRequestType: \"stage1\"\n\t});\n\n\tconst alert = useAlert()\n\n\tasync function Verify(){\n\n\t\t\t\n\t\tlet signindata = userdata\n\t\t\n\t\tif (rendertype === \"sms\") {\n\t\t\tconst sms = document.getElementById('sms').value;\n\t\t\tsignindata.OTP_Mobile = sms\n\t\t}\n\t\tif (rendertype === \"email\") {\n\t\t\tconst email = document.getElementById('email').value;\n\t\t\tsignindata.OTP_Email = email\n\t\t}\n\t\t\n\t\tif (rendertype === \"oauth\") {\n\t\t\tconst passcode = document.getElementById('oauth').value;\n\t\t\tsignindata.Oauth = passcode\n\t\t}\n\n\n\n\t\tlet gqlRequest = \"mutation SignIn ($data: SecurityCheckInput!){ SignIn(input: $data) { Token } }\"\n\t\t\n\t\tlet response = await SendData(gqlRequest, {data:signindata}, 'signin')\n\n\t\t\n\t\tif ( \"errors\" in response ){ // if password is a match redirect to profile page\n\t\t\t//{ProcessErrorAlerts(\"hi\", \"hi\")}\n\t\t\tconsole.log(\"user is not signed in\", response.errors[0].message )\n\t\t\treturn false\n\t\t\t\n\t\t} \n\t\t  \n\t\tif (response.data.SignIn.Token === \"proceed\") {\n\t\t\t//stage === \"stage2\" && setEmailOtp(signupdata.data.OTP_Email)\n\t\t\tsetUserdata(signindata);\n\t\t\t//setStage(\"stage3\")\n\t\t\tconsole.log(\"setting rendertype to next auth type from server\", response.data.SignIn.AuthType)\n\t\t\tsetRenderType(response.data.SignIn.AuthType)//update auth from server for next step/type of question dnd \n\t\t\t\n\n\t\t} else {\n\t\t\t    console.log(\"user is signed in token is\", response.data.SignIn.Token )\n\t\t\t\tlocalStorage.setItem('jwt_token', response.data.SignIn.Token) // Store JWT in storage\n\t\t\t   \tsetPage(\"home\")\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t}\n\n\tasync function ResendOTP (requestType) {\n\t\tRequestOTP(username, requestType, \"user\").then((response) => {\n\t\t\tif (( \"errors\" in response )) {\n\t\t\t\tconsole.log(\"error bak from otp request\", response.errors[0].message)\n\t\t\t\talertError(response.errors[0].message)\n\t\t\t}\n\t\t})\n\t}\n\n\t\n\tfunction alertError(error){\n\t\tconst delimiter = '= '\n\t\tconst start = 2,\n\t\ttokens = error.split(delimiter).slice(start),\n\t\tresult = tokens.join(delimiter); // those.that\n\t\talert.show(result)\n\t}\n\n\tfunction ChangeAuthType () {\n\n\t\tconsole.log(\"change auth type called\", authtype)\n\t\t//func is only called when type is sms as button only shown on that page. added switch from email for future\n\t\tif (rendertype === \"sms\") {\n\t\t\tResendOTP(\"!email\")\n\t\t\tsetRenderType(\"email\")\n\t\t\t\n\t\t} else {\n\t\t\tResendOTP(\"!sms\")\n\t\t\tsetRenderType(\"sms\")\n\t\t\t\n\t\t}\n\t}\n\n\n\tfunction ConfirmSms () {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div className=\"p-t-31 p-b-9\">\n\t\t\t\t\t<span className=\"txt1\">\n\t\t\t\t\t\t{\"Enter code sent to *******\" + address[0]}\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"wrap-input100 validate-input\" data-validate = \"verification code is required\">\n\t\t\t\t\t<input className=\"input100\" type=\"text\" name=\"mobileotp\" id=\"sms\"/>\n\t\t\t\t\t<span className=\"focus-input100\"></span>\n\t\t\t\t</div>\n\t\t\t\t<div >\n\t\t\t\t\t<button  type=\"button\" onClick={() => ResendOTP(\"!sms\")}>\n\t\t\t\t\t\tresend code\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<div >\n\t\t\t\t\t<button  type=\"button\" onClick={() => ChangeAuthType()}>\n\t\t\t\t\t\tdont have acccess to phone\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"container-login100-form-btn m-t-17\">\n\t\t\t\t</div>\n\t\t\t</>\n\t\t)\n\t}\n\n\tfunction ConfirmEmail () {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div className=\"p-t-31 p-b-9\">\n\t\t\t\t\t<span className=\"txt1\">\n\t\t\t\t\t\t{\"Enter code sent to email \" + address[1] + \"*******\"}\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"wrap-input100 validate-input\" data-validate = \"verification code is required\">\n\t\t\t\t\t<input className=\"input100\" type=\"text\" name=\"emailotp\" id=\"email\"/>\n\t\t\t\t\t<span className=\"focus-input100\"></span>\n\t\t\t\t</div>\n\t\t\t\t<div >\n\t\t\t\t\t<button  type=\"button\" onClick={() => ResendOTP(\"!email\")}>\n\t\t\t\t\t\tresend code\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t{/* <div >\n\t\t\t\t\t<button  type=\"button\" onClick={() => ChangeAuthType()}>\n\t\t\t\t\t\tdont have acccess to email\n\t\t\t\t\t</button>\n\t\t\t\t</div> */}\n\t\t\t\t\n\t\t\t</>\n\t\t)\n\t}\n\n\tfunction Authenticate () {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div className=\"p-t-31 p-b-9\">\n\t\t\t\t</div>\n\t\t\t\t<div className=\"container-login100-form-btn m-t-17\">\n\t\t\t\t</div>\n\t\t\t\t<div className=\"container-login100-form-btn m-t-17\">\n\t\t\t\t\t<button className=\"login100-form-btn\" type=\"button\" onClick={Verify}>\n\t\t\t\t\t\tSign in\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"w-full text-center p-t-55\">\n\t\t\t\t\t<button onClick={() => setPage(\"default\")}>Back to account details</button>\n\t\t\t\t</div>\n\t\t\t</>\n\t\t)\n\t}\n\n\tfunction Header () {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<span className=\"login100-form-title p-b-53\">\n\t\t\t\t\t<h3><i class=\"fa fa-lock fa-4x\"></i></h3>\n\t\t\t\t</span>\n\t\t\t\t<div>\n\t\t\t\t</div>\n\t\t\t</>\n\t\t)\n\t}\n\t\n\n\t\n\t\n\t\n\n\t// function HighSecurity () {\n\t// \treturn (\n\t// \t\t<>\n\t// \t\t\t<ConfirmSms/>\n\t// \t\t\t<ConfirmEmail/>\n\t// \t\t</>\n\t// \t)\n\t// }\n\n\t// const authTypeMap = {\n\t// \t\"email\": <ConfirmEmail/>,\n\t// \t\"sms\": <ConfirmSms/>,\n\t// \t\"both\": <HighSecurity/>,\n\t// }\n\n\tfunction ConfirmSignin () {\n\t\treturn (\n\t\t\t<>\t\n\t\t\t\t<div className=\"limiter\">\n      \t\t\t\t<div className=\"container-login100\" >\n       \t\t\t\t\t<div className=\"wrap-login100 p-l-110 p-r-110 p-t-62 p-b-33\">\n          \t\t\t\t\t<form className=\"login100-form validate-form flex-sb flex-w\">\n\t\t\t\t\t\t\t\t\t<Header/>\n\t\t\t\t\t\t\t\t\t{rendertype === \"email\" && <ConfirmEmail/>}\n\t\t\t\t\t\t\t\t\t{rendertype === \"sms\" && <ConfirmSms/>}\n\t\t\t\t\t\t\t\t\t<Authenticate/>\n\t\t\t\t\t\t\t</form>\n        \t\t\t\t</div>\n      \t\t\t\t</div>\n    \t\t\t</div>\n\t\t\t</>\n\t\t)\n\t}\n\n\n\treturn ( \n\t\t<>\n\t\t\t{page === \"default\" && <ConfirmSignin/>}\n\t\t\t{page === \"home\" && <Home sessionuser={username} page={\"home\"} viewing={username}/>}\n\t\t\t\n\t\t</>\n\t)\n};","/home/dev/go/Social-Network-Microservice/frontend-react/src/routes/Home.jsx",["72","73","74","75"],[],"/home/dev/go/Social-Network-Microservice/frontend-react/src/routes/RequestOTP.jsx",[],[],"/home/dev/go/Social-Network-Microservice/frontend-react/src/routes/Logout.jsx",[],[],{"ruleId":"76","severity":1,"message":"77","line":4,"column":8,"nodeType":"78","messageId":"79","endLine":4,"endColumn":21},{"ruleId":"76","severity":1,"message":"80","line":6,"column":8,"nodeType":"78","messageId":"79","endLine":6,"endColumn":17},{"ruleId":"76","severity":1,"message":"81","line":9,"column":8,"nodeType":"78","messageId":"79","endLine":9,"endColumn":14},{"ruleId":"76","severity":1,"message":"82","line":10,"column":8,"nodeType":"78","messageId":"79","endLine":10,"endColumn":14},{"ruleId":"76","severity":1,"message":"83","line":13,"column":19,"nodeType":"78","messageId":"79","endLine":13,"endColumn":30},{"ruleId":"76","severity":1,"message":"84","line":386,"column":11,"nodeType":"78","messageId":"79","endLine":386,"endColumn":23},{"ruleId":"76","severity":1,"message":"85","line":10,"column":19,"nodeType":"78","messageId":"79","endLine":10,"endColumn":30},{"ruleId":"76","severity":1,"message":"86","line":11,"column":9,"nodeType":"78","messageId":"79","endLine":11,"endColumn":17},{"ruleId":"76","severity":1,"message":"87","line":11,"column":19,"nodeType":"78","messageId":"79","endLine":11,"endColumn":30},{"ruleId":"76","severity":1,"message":"83","line":12,"column":19,"nodeType":"78","messageId":"79","endLine":12,"endColumn":30},{"ruleId":"76","severity":1,"message":"88","line":13,"column":18,"nodeType":"78","messageId":"79","endLine":13,"endColumn":28},{"ruleId":"76","severity":1,"message":"89","line":8,"column":8,"nodeType":"78","messageId":"79","endLine":8,"endColumn":15},{"ruleId":"76","severity":1,"message":"90","line":14,"column":24,"nodeType":"78","messageId":"79","endLine":14,"endColumn":38},{"ruleId":"91","severity":1,"message":"92","line":38,"column":5,"nodeType":"93","endLine":38,"endColumn":7,"suggestions":"94"},{"ruleId":"76","severity":1,"message":"95","line":223,"column":19,"nodeType":"78","messageId":"79","endLine":223,"endColumn":28},"no-unused-vars","'ThemeProvider' is defined but never used.","Identifier","unusedVar","'Container' is defined but never used.","'SignUp' is defined but never used.","'SignIn' is defined but never used.","'setAuthType' is assigned a value but never used.","'HighSecurity' is defined but never used.","'setUsername' is assigned a value but never used.","'password' is assigned a value but never used.","'setPassword' is assigned a value but never used.","'setAddress' is assigned a value but never used.","'ChkAuth' is defined but never used.","'setSessionUser' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getCmt'. Either include it or remove the dependency array.","ArrayExpression",["96"],"'updateBio' is defined but never used.",{"desc":"97","fix":"98"},"Update the dependencies array to be: [getCmt]",{"range":"99","text":"100"},[1588,1590],"[getCmt]"]