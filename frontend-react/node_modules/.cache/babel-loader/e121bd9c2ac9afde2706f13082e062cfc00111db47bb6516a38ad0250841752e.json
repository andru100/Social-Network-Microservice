{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport ChkAuth from './chkAuth';\nimport SendData from './SendData';\nimport bkpic from '../images/profbkup.jpg';\nexport default function RenderProfileSetup(props) {\n  _s();\n  const [sessionuser, setSessionUser] = useState(props.username);\n  const [cmt, setcmt] = useState({\n    Posts: [],\n    Photos: []\n  });\n  const [dp, setDp] = useState(false); // hide/show div\n  let Page = \"Bio\";\n  useEffect(() => {\n    getCmt().then(cmtz => {\n      if (cmtz) {\n        setcmt(cmtz);\n        console.log(\"use effet get cooment users data object is :\", cmtz);\n      }\n    });\n  }, []);\n  function GoHome() {\n    console.log(\"going home, username:\", username);\n    setPage(\"home\");\n  }\n  function Logout() {\n    localStorage.removeItem('jwt_token');\n    //Navigate (\"/\")\n  }\n\n  async function getCmt(user2find) {\n    // sends Username, password from input, then backend creates s3 bucket in Username and stores details on mongo\n\n    let data = {\n      Username: User\n    };\n    let queryType;\n    if (Page === \"All\") {\n      queryType = \"GetAllComments\";\n    } else {\n      queryType = \"GetUserComments\";\n    }\n    if (user2find) {\n      data.Username = sessionUser;\n    }\n    let gqlRequest = \"query \" + queryType + \" ($Username: String!){  \" + queryType + \" (input: $Username) { Key ID Username Password Email Bio Profpic Photos LastCommentNum Posts { Username SessionUser MainCmt PostNum Time TimeStamp Date Comments { Username Comment Profpic } Likes { Username Profpic } } } }\";\n    let response = await SendData(gqlRequest, data);\n    if (\"errors\" in response) {\n      // if password is a match redirect to profile page\n      //{ProcessErrorAlerts(\"hi\", \"hi\")}\n      console.log(\"error retrieving data\", response.errors[0].message);\n      return false;\n    } else {\n      return response.data[queryType];\n    }\n  }\n  async function updateBio() {\n    const bio = document.getElementById('bioBox').value;\n    let variables = {\n      data: {\n        Username: sessionuser,\n        Bio: bio\n      }\n    };\n    let gqlRequest = \"mutation UpdateBio ($data: UpdateBioInput!){ UpdateBio(input: $data) { Key ID Username Password Email Bio Profpic Photos LastCommentNum Posts { Username SessionUser MainCmt PostNum Time TimeStamp Date Comments { Username Comment Profpic } Likes { Username Profpic } } } }\";\n    let response = await SendData(gqlRequest, variables);\n    if (\"errors\" in response) {\n      // if password is a match redirect to profile page\n      //{ProcessErrorAlerts(\"hi\", \"hi\")}\n      console.log(\"error updating bio\", response.errors[0].message);\n      return false;\n    } else {\n      // if password is a match redirect to profile page\n      console.log(\"saved bio\");\n      setcmt(response.data.UpdateBio); // store users data object\n      setDp(!dp); // show bio edit box\n    }\n  }\n\n  async function addPhotos(event) {\n    if (event) {\n      let file = event.target.files[0];\n      var data = new FormData();\n      data.append('file', file);\n      data.append('user', sessionuser);\n      data.append('type', 'addPhotos');\n      let options = {\n        method: 'POST',\n        body: data\n      };\n      let postUrl = process.env.REACT_APP_BACKEND_UPLOAD + '/postfile/' + sessionuser;\n      let response = await fetch(postUrl, options);\n      let convert = await response.json();\n      if (response.status === 401 || response.status === 400) {\n        console.log(\"your pic didn't save, please try again\");\n      } else if (response.status === 200) {\n        console.log(\"added pic to users photos\");\n        setcmt(convert);\n      }\n    }\n  }\n  ;\n  function triggerClick(event) {\n    // clicking image triggers upload button click\n    var myButton = document.getElementById(event.target.name);\n    if (myButton) {\n      myButton.click();\n    }\n  }\n  async function addProfilePic(event) {\n    if (event) {\n      let file = event.target.files[0];\n      var data = new FormData();\n      data.append('file', file);\n      data.append('user', sessionuser);\n      data.append('type', 'profPic');\n      let options = {\n        method: 'POST',\n        body: data\n      };\n      let ProfUrl = process.env.REACT_APP_BACKEND_UPLOAD + '/postfile/' + sessionuser;\n      let response = await fetch(ProfUrl, options);\n      let convert = await response.json();\n      document.getElementById(\"profpic11\").src = convert.Profpic; // get posted img address and change profile picture\n    }\n  }\n\n  ;\n}\n_s(RenderProfileSetup, \"jZs7VT3tnSLo1w67fer0F7Qhdg0=\");\n_c = RenderProfileSetup;\nvar _c;\n$RefreshReg$(_c, \"RenderProfileSetup\");","map":{"version":3,"names":["useEffect","useState","useNavigate","useParams","ChkAuth","SendData","bkpic","RenderProfileSetup","props","sessionuser","setSessionUser","username","cmt","setcmt","Posts","Photos","dp","setDp","Page","getCmt","then","cmtz","console","log","GoHome","setPage","Logout","localStorage","removeItem","user2find","data","Username","User","queryType","sessionUser","gqlRequest","response","errors","message","updateBio","bio","document","getElementById","value","variables","Bio","UpdateBio","addPhotos","event","file","target","files","FormData","append","options","method","body","postUrl","process","env","REACT_APP_BACKEND_UPLOAD","fetch","convert","json","status","triggerClick","myButton","name","click","addProfilePic","ProfUrl","src","Profpic"],"sources":["/home/dev/go/Social-Network-Microservice/frontend-react/src/routes/EditProfile.jsx"],"sourcesContent":["import { useEffect, useState} from 'react'\nimport { useNavigate, useParams } from 'react-router-dom';\nimport ChkAuth from './chkAuth';\nimport SendData from './SendData';\nimport bkpic from '../images/profbkup.jpg';\n  \nexport default function RenderProfileSetup (props) { \n  const [sessionuser, setSessionUser] = useState (props.username)\n  const[cmt, setcmt] = useState({Posts:[], Photos: []})\n  const [dp, setDp] = useState(false); // hide/show div\n  let Page =  \"Bio\"\n\n  useEffect( () => {\n        getCmt().then(cmtz => {\n          if (cmtz) {\n          setcmt(cmtz)\n          console.log(\"use effet get cooment users data object is :\", cmtz)\n        }   \n    })\n  },[]);\n\n  function GoHome () {\n\t\tconsole.log(\"going home, username:\", username)\n\t\tsetPage(\"home\")\n\t}\n  \n  function Logout (){\n    localStorage.removeItem('jwt_token')\n    //Navigate (\"/\")\n  }\n\n  async function getCmt (user2find) { // sends Username, password from input, then backend creates s3 bucket in Username and stores details on mongo\n  \n    let data = {Username: User}\n\n    let queryType\n\n    if (Page === \"All\") {\n       queryType = \"GetAllComments\"\n    } else {\n       queryType =\"GetUserComments\"\n    }\n\n\n    if (user2find) {\n       data.Username = sessionUser\n    }\n\n\n    let gqlRequest = \"query \" + queryType + \" ($Username: String!){  \" + queryType + \" (input: $Username) { Key ID Username Password Email Bio Profpic Photos LastCommentNum Posts { Username SessionUser MainCmt PostNum Time TimeStamp Date Comments { Username Comment Profpic } Likes { Username Profpic } } } }\"\n    let response = await SendData(gqlRequest, data)\n    if ( \"errors\" in response ){ // if password is a match redirect to profile page\n      //{ProcessErrorAlerts(\"hi\", \"hi\")}\n      console.log(\"error retrieving data\", response.errors[0].message )\n      return false\n      \n    } else {\n       return response.data[queryType] \n    }\n }\n\n\n  async function updateBio () { \n    \n    const bio = document.getElementById('bioBox').value\n\n    let variables = {data: {Username: sessionuser, Bio: bio}}\n\n    let gqlRequest = \"mutation UpdateBio ($data: UpdateBioInput!){ UpdateBio(input: $data) { Key ID Username Password Email Bio Profpic Photos LastCommentNum Posts { Username SessionUser MainCmt PostNum Time TimeStamp Date Comments { Username Comment Profpic } Likes { Username Profpic } } } }\"\n\t\t\n\t\tlet response = await SendData(gqlRequest, variables)\n\n\t\t\n\t\tif ( \"errors\" in response ){ // if password is a match redirect to profile page\n      //{ProcessErrorAlerts(\"hi\", \"hi\")}\n      console.log(\"error updating bio\", response.errors[0].message )\n      return false\n      \n    } else { // if password is a match redirect to profile page\n\t\t\tconsole.log(\"saved bio\")\n      setcmt(response.data.UpdateBio) // store users data object\n      setDp(!dp) // show bio edit box\n\t\t} \n  }\n\n  async function addPhotos (event) {\n    if (event) {\n      let file = (event.target.files[0])\n      var data = new FormData() \n      data.append('file', file)\n      data.append('user', sessionuser)\n      data.append('type', 'addPhotos')\n    \n      let options = {\n        method: 'POST',\n        body: data, \n      }\n\n      let postUrl = process.env.REACT_APP_BACKEND_UPLOAD +  '/postfile/' + sessionuser \n      let response = await fetch(postUrl, options)\n      let convert = await response.json ()\n      if ( response.status === 401 || response.status === 400){\n        console.log(\"your pic didn't save, please try again\")\n       } else if ( response.status === 200){ \n        console.log(\"added pic to users photos\")\n        setcmt(convert)\n       }\n      \n    }\n  };\n\n  function triggerClick(event){ // clicking image triggers upload button click\n    var myButton = document.getElementById(event.target.name);\n    if ( myButton ) {\n      myButton.click()\n    }\n  }\n\n  async function addProfilePic (event) {\n    if (event) {\n      let file = (event.target.files[0])\n      var data = new FormData() \n      data.append('file', file)\n      data.append('user', sessionuser)\n      data.append('type', 'profPic')\n    \n      let options = {\n        method: 'POST',\n        body: data, \n      }\n\n      let ProfUrl = process.env.REACT_APP_BACKEND_UPLOAD + '/postfile/' + sessionuser\n      let response = await fetch(ProfUrl, options)\n      let convert = await response.json ()\n      document.getElementById(\"profpic11\").src = convert.Profpic // get posted img address and change profile picture\n      \n    }\n  };\n\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}