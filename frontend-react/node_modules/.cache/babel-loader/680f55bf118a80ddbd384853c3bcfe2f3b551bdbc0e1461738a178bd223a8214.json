{"ast":null,"code":"export default async function SendData(request, variables) {\n  // send data to GraphQL\n\n  let GQLpayload = {\n    \"query\": request,\n    \"variables\": variables\n  };\n  let options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(GQLpayload)\n  };\n  let postUrl = process.env.REACT_APP_BACKEND_GRAPHQL + \"/query\";\n  console.log(\"posturl is!!!!!\", postUrl);\n  let response = await fetch(postUrl, options);\n  let convert = await response.json();\n  console.log(\"response from GraphQL\", convert);\n  if (\"errors\" in convert) {\n    // if password is a match redirect to profile page\n    console.log(\"this is the pot\", convert.errors[0].message);\n    ProcessErrorAlerts(convert.errors[0].message);\n    console.log(\"error sending data\", convert.errors);\n  } else {\n    return convert;\n  }\n}\n_c = SendData;\nvar _c;\n$RefreshReg$(_c, \"SendData\");","map":{"version":3,"names":["SendData","request","variables","GQLpayload","options","method","headers","body","JSON","stringify","postUrl","process","env","REACT_APP_BACKEND_GRAPHQL","console","log","response","fetch","convert","json","errors","message","ProcessErrorAlerts"],"sources":["C:/Users/devteam/source/repos/andru100/Social-Network-Microservice/frontend-react/src/routes/SendData.jsx"],"sourcesContent":["export default async function SendData (request, variables ) { // send data to GraphQL\r\n    \r\n    let GQLpayload = {\r\n        \"query\": request,\r\n        \"variables\":variables\r\n    }\r\n   \r\n    let options = {\r\n        method: 'POST',\r\n        headers: {\r\n        'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(GQLpayload)\r\n    }\r\n\r\n    let postUrl = process.env.REACT_APP_BACKEND_GRAPHQL + \"/query\" \r\n    console.log(\"posturl is!!!!!\", postUrl)\r\n    let response = await fetch(postUrl, options)\r\n    let convert = await response.json ()\r\n\r\n    console.log(\"response from GraphQL\", convert)\r\n    \r\n    if ( \"errors\" in convert ){ // if password is a match redirect to profile page\r\n        console.log(\"this is the pot\", convert.errors[0].message )\r\n        ProcessErrorAlerts(convert.errors[0].message)\r\n        console.log(\"error sending data\" , convert.errors)\r\n    } else {\r\n        return convert\r\n    }\r\n\r\n}"],"mappings":"AAAA,eAAe,eAAeA,QAAQ,CAAEC,OAAO,EAAEC,SAAS,EAAG;EAAE;;EAE3D,IAAIC,UAAU,GAAG;IACb,OAAO,EAAEF,OAAO;IAChB,WAAW,EAACC;EAChB,CAAC;EAED,IAAIE,OAAO,GAAG;IACVC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACT,cAAc,EAAE;IAChB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,UAAU;EACnC,CAAC;EAED,IAAIO,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,yBAAyB,GAAG,QAAQ;EAC9DC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEL,OAAO,CAAC;EACvC,IAAIM,QAAQ,GAAG,MAAMC,KAAK,CAACP,OAAO,EAAEN,OAAO,CAAC;EAC5C,IAAIc,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAG;EAEpCL,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEG,OAAO,CAAC;EAE7C,IAAK,QAAQ,IAAIA,OAAO,EAAE;IAAE;IACxBJ,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEG,OAAO,CAACE,MAAM,CAAC,CAAC,CAAC,CAACC,OAAO,CAAE;IAC1DC,kBAAkB,CAACJ,OAAO,CAACE,MAAM,CAAC,CAAC,CAAC,CAACC,OAAO,CAAC;IAC7CP,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAGG,OAAO,CAACE,MAAM,CAAC;EACtD,CAAC,MAAM;IACH,OAAOF,OAAO;EAClB;AAEJ;AAAC,KA9B6BlB,QAAQ;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}