{"ast":null,"code":"import React, { useEffect } from 'react';\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar headerDefault = 'Warning';\nvar btnTextDefault = 'Close';\nvar errorColor = 'rgb(220, 53, 69)';\nvar warningColor = 'rgb(255, 193, 7)';\nvar successColor = 'rgb(40, 167, 69)';\nvar defaultColor = 'rgb(51, 51, 51)';\nvar AlertReact = function AlertReact(_ref) {\n  var _ref$header = _ref.header,\n    header = _ref$header === void 0 ? headerDefault : _ref$header,\n    _ref$btnText = _ref.btnText,\n    btnText = _ref$btnText === void 0 ? btnTextDefault : _ref$btnText,\n    text = _ref.text,\n    show = _ref.show,\n    showBorderBottom = _ref.showBorderBottom,\n    type = _ref.type,\n    color = _ref.color,\n    onClosePress = _ref.onClosePress,\n    _ref$pressCloseOnOuts = _ref.pressCloseOnOutsideClick,\n    pressCloseOnOutsideClick = _ref$pressCloseOnOuts === void 0 ? true : _ref$pressCloseOnOuts,\n    _ref$alertStyles = _ref.alertStyles,\n    alertStyles = _ref$alertStyles === void 0 ? {} : _ref$alertStyles,\n    _ref$headerStyles = _ref.headerStyles,\n    headerStyles = _ref$headerStyles === void 0 ? {} : _ref$headerStyles,\n    _ref$textStyles = _ref.textStyles,\n    textStyles = _ref$textStyles === void 0 ? {} : _ref$textStyles,\n    _ref$buttonStyles = _ref.buttonStyles,\n    buttonStyles = _ref$buttonStyles === void 0 ? {} : _ref$buttonStyles;\n  useEffect(function () {\n    if (pressCloseOnOutsideClick && show) {\n      document.addEventListener('mousedown', handleClickOutsideAlert);\n    }\n    return function () {\n      document.removeEventListener('mousedown', handleClickOutsideAlert);\n    };\n  }, [show]);\n  var handleClickOutsideAlert = function handleClickOutsideAlert(e) {\n    if (show) {\n      var target = e === null || e === void 0 ? void 0 : e.target;\n      if ((target === null || target === void 0 ? void 0 : target.className) === 'backdrop') {\n        onClosePressClick();\n      }\n    }\n  };\n  var onClosePressClick = function onClosePressClick() {\n    document.removeEventListener('mousedown', handleClickOutsideAlert);\n    onClosePress();\n  };\n  var getColor = function getColor() {\n    if (color) {\n      return color;\n    } else if (type === 'error') return errorColor;else if (type === 'success') return successColor;else if (type === 'warning') return warningColor;else return defaultColor;\n  };\n  var colorToUse = getColor();\n  var getAlertStyle = function getAlertStyle() {\n    if (showBorderBottom === false) {\n      return alertStyles;\n    } else {\n      return _extends({\n        borderBottom: \"3px solid \" + colorToUse\n      }, alertStyles);\n    }\n  };\n  return React.createElement(\"div\", {\n    className: 'alert-container'\n  }, show ? React.createElement(\"div\", {\n    role: 'alert'\n  }, React.createElement(\"div\", {\n    className: 'backdrop'\n  }), React.createElement(\"div\", {\n    className: 'alert-main',\n    style: getAlertStyle()\n  }, React.createElement(\"h3\", {\n    className: 'alert-header',\n    style: headerStyles\n  }, header), React.createElement(\"p\", {\n    className: 'alert-body',\n    style: textStyles\n  }, text), React.createElement(\"a\", {\n    onClick: function onClick() {\n      return onClosePressClick();\n    },\n    className: 'alert-button',\n    role: 'button',\n    style: _extends({\n      backgroundColor: colorToUse\n    }, buttonStyles),\n    href: '#'\n  }, btnText))) : null);\n};\nexport default AlertReact;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;AACO,IAAMA,aAAa,GAAG,SAAtB;AACA,IAAMC,cAAc,GAAG,OAAvB;AAGA,IAAMC,UAAU,GAAG,kBAAnB;AACA,IAAMC,YAAY,GAAG,kBAArB;AACA,IAAMC,YAAY,GAAG,kBAArB;AACA,IAAMC,YAAY,GAAG,iBAArB;ACmBP,IAAMC,UAAU,GAAG,SAAbA,UAAa;yBAEjBC;IAAAA,kCAASP;wBACTQ;IAAAA,oCAAUP;IACVQ;IAEAC;IACAC;IACAC;IACAC;IAEAC;iCACAC;IAAAA,8DAA2B;4BAE3BC;IAAAA,4CAAc;6BACdC;IAAAA,8CAAe;2BACfC;IAAAA,0CAAa;6BACbC;IAAAA,8CAAe;EAIfC,SAAS,CAAC;IAER,IAAIL,wBAAwB,IAAIL,IAAhC,EAAsC;MACpCW,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,EAAuCC,uBAAvC;IACD;IAED,OAAO;MACLF,QAAQ,CAACG,mBAAT,CAA6B,WAA7B,EAA0CD,uBAA1C;IACD,CAFD;EAGD,CATQ,EASN,CAACb,IAAD,CATM,CAAT;EAaA,IAAMa,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACE,CAAD;IAC9B,IAAIf,IAAJ,EAAU;MACR,IAAMgB,MAAM,GAAGD,CAAH,aAAGA,CAAH,uBAAGA,CAAC,CAAEC,MAAlB;MACA,IAAI,OAAM,SAAN,UAAM,WAAN,kBAAM,CAAEC,SAAR,MAAsB,UAA1B,EAAsC;QACpCC,iBAAiB;MAClB;IACF;EACF,CAPD;EASA,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB;IACxBP,QAAQ,CAACG,mBAAT,CAA6B,WAA7B,EAA0CD,uBAA1C;IACAT,YAAY;EACb,CAHD;EAOA,IAAMe,QAAQ,GAAG,SAAXA,QAAW;IACf,IAAIhB,KAAJ,EAAW;MACT,OAAOA,KAAP;IACD,CAFD,MAEO,IAAID,IAAI,KAAK,OAAb,EAAsB,OAAOV,UAAP,CAAtB,KACF,IAAIU,IAAI,KAAK,SAAb,EAAwB,OAAOR,YAAP,CAAxB,KACA,IAAIQ,IAAI,KAAK,SAAb,EAAwB,OAAOT,YAAP,CAAxB,KACA,OAAOE,YAAP;EACN,CAPD;EAQA,IAAMyB,UAAU,GAAGD,QAAQ,EAA3B;EAEA,IAAME,aAAa,GAAG,SAAhBA,aAAgB;IACpB,IAAIpB,gBAAgB,KAAK,KAAzB,EAAgC;MAC9B,OAAOK,WAAP;IACD,CAFD,MAEO;MACL;QAASgB,YAAY,iBAAeF;MAApC,GAAqDd,WAArD;IACD;EACF,CAND;EAQA,OACEiB;IAAKN,SAAS,EAAC;GAAf,EACGjB,IAAI,GACHuB;IAAKC,IAAI,EAAC;GAAV,EACED;IAAKN,SAAS,EAAC;GAAf,CADF,EAEEM;IAAKN,SAAS,EAAC;IAAaQ,KAAK,EAAEJ,aAAa;GAAhD,EACEE;IAAIN,SAAS,EAAC;IAAeQ,KAAK,EAAElB;GAApC,EACGV,MADH,CADF,EAIE0B;IAAGN,SAAS,EAAC;IAAaQ,KAAK,EAAEjB;GAAjC,EACGT,IADH,CAJF,EAOEwB;IACEG,OAAO,EAAE;MAAA,OAAMR,iBAAiB,EAAvB;IAAA;IACTD,SAAS,EAAC;IACVO,IAAI,EAAC;IACLC,KAAK;MAAIE,eAAe,EAAEP;IAArB,GAAoCX,YAApC;IACLmB,IAAI,EAAC;GALP,EAOG9B,OAPH,CAPF,CAFF,CADG,GAqBD,IAtBN,CADF;AA0BD,CA9FD","names":["headerDefault","btnTextDefault","errorColor","warningColor","successColor","defaultColor","AlertReact","header","btnText","text","show","showBorderBottom","type","color","onClosePress","pressCloseOnOutsideClick","alertStyles","headerStyles","textStyles","buttonStyles","useEffect","document","addEventListener","handleClickOutsideAlert","removeEventListener","e","target","className","onClosePressClick","getColor","colorToUse","getAlertStyle","borderBottom","React","role","style","onClick","backgroundColor","href"],"sources":["C:\\Users\\devteam\\source\\repos\\andru100\\Social-Network-Microservice\\frontend-react\\node_modules\\react-popup-alert\\src\\constants.jsx","C:\\Users\\devteam\\source\\repos\\andru100\\Social-Network-Microservice\\frontend-react\\node_modules\\react-popup-alert\\src\\index.tsx"],"sourcesContent":["// Texts\nexport const headerDefault = 'Warning' // warning text\nexport const btnTextDefault = 'Close' // button text\n\n// Colors\nexport const errorColor = 'rgb(220, 53, 69)' // '#dc3545'\nexport const warningColor = 'rgb(255, 193, 7)' // '#28a745'\nexport const successColor = 'rgb(40, 167, 69)' // '#ffc107'\nexport const defaultColor = 'rgb(51, 51, 51)' // '#333'\n","import React, { useEffect } from 'react'\nimport {\n  headerDefault,\n  btnTextDefault,\n  defaultColor,\n  errorColor,\n  successColor,\n  warningColor\n} from './constants'\nimport './styles.scss'\n\ninterface AlertProps {\n  text: string\n  onClosePress: Function\n  show: boolean\n  header?: string | undefined\n  btnText?: string | undefined\n  showBorderBottom?: boolean\n  type?: string\n  color?: string\n  pressCloseOnOutsideClick?: boolean\n  alertStyles?: object\n  headerStyles?: object\n  textStyles?: object\n  buttonStyles?: object\n}\n\nconst AlertReact = ({\n  // text\n  header = headerDefault,\n  btnText = btnTextDefault,\n  text,\n  // visuals\n  show,\n  showBorderBottom,\n  type,\n  color,\n  // functions\n  onClosePress,\n  pressCloseOnOutsideClick = true,\n  // styles\n  alertStyles = {},\n  headerStyles = {},\n  textStyles = {},\n  buttonStyles = {}\n}: AlertProps) => {\n  /* LIFECYCLE METHODS */\n\n  useEffect(() => {\n    // Add event listener if it is shown\n    if (pressCloseOnOutsideClick && show) {\n      document.addEventListener('mousedown', handleClickOutsideAlert)\n    }\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutsideAlert)\n    }\n  }, [show])\n\n  /* LISTENER FUNCTIONS */\n\n  const handleClickOutsideAlert = (e: Event): void => {\n    if (show) {\n      const target = e?.target as HTMLInputElement\n      if (target?.className === 'backdrop') {\n        onClosePressClick()\n      }\n    }\n  }\n\n  const onClosePressClick = () => {\n    document.removeEventListener('mousedown', handleClickOutsideAlert)\n    onClosePress()\n  }\n\n  /* GET DATA */\n\n  const getColor = () => {\n    if (color) {\n      return color\n    } else if (type === 'error') return errorColor\n    else if (type === 'success') return successColor\n    else if (type === 'warning') return warningColor\n    else return defaultColor\n  }\n  const colorToUse = getColor()\n\n  const getAlertStyle = () => {\n    if (showBorderBottom === false) {\n      return alertStyles\n    } else {\n      return { borderBottom: `3px solid ${colorToUse}`, ...alertStyles }\n    }\n  }\n\n  return (\n    <div className='alert-container'>\n      {show ? (\n        <div role='alert'>\n          <div className='backdrop' />\n          <div className='alert-main' style={getAlertStyle()}>\n            <h3 className='alert-header' style={headerStyles}>\n              {header}\n            </h3>\n            <p className='alert-body' style={textStyles}>\n              {text}\n            </p>\n            <a\n              onClick={() => onClosePressClick()}\n              className='alert-button'\n              role='button'\n              style={{ backgroundColor: colorToUse, ...buttonStyles }}\n              href='#'\n            >\n              {btnText}\n            </a>\n          </div>\n        </div>\n      ) : null}\n    </div>\n  )\n}\n\nexport default AlertReact\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}