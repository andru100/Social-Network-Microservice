[{"/home/andru/Code/Social-Network-GraphQL/Frontend-React/src/index.js":"1","/home/andru/Code/Social-Network-GraphQL/Frontend-React/src/App.js":"2","/home/andru/Code/Social-Network-GraphQL/Frontend-React/src/PublicRoutes.jsx":"3","/home/andru/Code/Social-Network-GraphQL/Frontend-React/src/routes/SignUp.jsx":"4","/home/andru/Code/Social-Network-GraphQL/Frontend-React/src/routes/ProfileSetup.jsx":"5","/home/andru/Code/Social-Network-GraphQL/Frontend-React/src/routes/Profile.jsx":"6","/home/andru/Code/Social-Network-GraphQL/Frontend-React/src/routes/SignIn.jsx":"7","/home/andru/Code/Social-Network-GraphQL/Frontend-React/src/routes/chkAuth.jsx":"8","/home/andru/Code/Social-Network-GraphQL/Frontend-React/src/routes/SendData.jsx":"9","/home/andru/go/src/github.com/andru100/Social-Network-Microservice/Frontend-React/src/index.js":"10","/home/andru/go/src/github.com/andru100/Social-Network-Microservice/Frontend-React/src/App.js":"11","/home/andru/go/src/github.com/andru100/Social-Network-Microservice/Frontend-React/src/PublicRoutes.jsx":"12","/home/andru/go/src/github.com/andru100/Social-Network-Microservice/Frontend-React/src/routes/ProfileSetup.jsx":"13","/home/andru/go/src/github.com/andru100/Social-Network-Microservice/Frontend-React/src/routes/Profile.jsx":"14","/home/andru/go/src/github.com/andru100/Social-Network-Microservice/Frontend-React/src/routes/SignIn.jsx":"15","/home/andru/go/src/github.com/andru100/Social-Network-Microservice/Frontend-React/src/routes/SignUp.jsx":"16","/home/andru/go/src/github.com/andru100/Social-Network-Microservice/Frontend-React/src/routes/chkAuth.jsx":"17","/home/andru/go/src/github.com/andru100/Social-Network-Microservice/Frontend-React/src/routes/SendData.jsx":"18"},{"size":366,"mtime":1677002618442,"results":"19","hashOfConfig":"20"},{"size":556,"mtime":1677002618047,"results":"21","hashOfConfig":"20"},{"size":706,"mtime":1677002618055,"results":"22","hashOfConfig":"20"},{"size":2694,"mtime":1677002618449,"results":"23","hashOfConfig":"20"},{"size":8107,"mtime":1677002618446,"results":"24","hashOfConfig":"20"},{"size":15417,"mtime":1677002618445,"results":"25","hashOfConfig":"20"},{"size":2645,"mtime":1677002618448,"results":"26","hashOfConfig":"20"},{"size":606,"mtime":1677002618450,"results":"27","hashOfConfig":"20"},{"size":792,"mtime":1677002618447,"results":"28","hashOfConfig":"20"},{"size":366,"mtime":1678330417164,"results":"29","hashOfConfig":"30"},{"size":556,"mtime":1678330416959,"results":"31","hashOfConfig":"30"},{"size":706,"mtime":1678330416969,"results":"32","hashOfConfig":"30"},{"size":8107,"mtime":1678459714705,"results":"33","hashOfConfig":"30"},{"size":15417,"mtime":1678330417168,"results":"34","hashOfConfig":"30"},{"size":2645,"mtime":1678330417171,"results":"35","hashOfConfig":"30"},{"size":2694,"mtime":1678330417172,"results":"36","hashOfConfig":"30"},{"size":606,"mtime":1678330417175,"results":"37","hashOfConfig":"30"},{"size":792,"mtime":1678330417170,"results":"38","hashOfConfig":"30"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"y8db16",{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"12yzxyg",{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/andru/Code/Social-Network-GraphQL/Frontend-React/src/index.js",[],[],"/home/andru/Code/Social-Network-GraphQL/Frontend-React/src/App.js",[],[],"/home/andru/Code/Social-Network-GraphQL/Frontend-React/src/PublicRoutes.jsx",[],[],"/home/andru/Code/Social-Network-GraphQL/Frontend-React/src/routes/SignUp.jsx",[],[],"/home/andru/Code/Social-Network-GraphQL/Frontend-React/src/routes/ProfileSetup.jsx",["96"],[],"/home/andru/Code/Social-Network-GraphQL/Frontend-React/src/routes/Profile.jsx",["97"],[],"/home/andru/Code/Social-Network-GraphQL/Frontend-React/src/routes/SignIn.jsx",["98"],[],"/home/andru/Code/Social-Network-GraphQL/Frontend-React/src/routes/chkAuth.jsx",[],[],"/home/andru/Code/Social-Network-GraphQL/Frontend-React/src/routes/SendData.jsx",[],[],"/home/andru/go/src/github.com/andru100/Social-Network-Microservice/Frontend-React/src/index.js",[],[],"/home/andru/go/src/github.com/andru100/Social-Network-Microservice/Frontend-React/src/App.js",[],[],"/home/andru/go/src/github.com/andru100/Social-Network-Microservice/Frontend-React/src/PublicRoutes.jsx",[],[],"/home/andru/go/src/github.com/andru100/Social-Network-Microservice/Frontend-React/src/routes/ProfileSetup.jsx",["99"],[],"import { useEffect, useState} from 'react'\nimport { useNavigate, useParams } from 'react-router-dom';\nimport ChkAuth from './chkAuth';\nimport SendData from './SendData';\nimport bkpic from '../images/profbkup.jpg';\n  \nexport default function RenderProfileSetup () { \n  const [sessionUser, setSessionUser] = useState (\"\")\n  const[cmt, setcmt] = useState({Posts:[], Photos: []})\n  const [dp, setDp] = useState(false); // hide/show div\n  let Page =  \"Bio\"\n  const Navigate = useNavigate();\n  var {User} = useParams()\n\n  useEffect( () => {\n    ChkAuth().then(user => {\n      if (user) {\n        setSessionUser(user)\n        getCmt().then(cmtz => {\n          if (cmtz) {\n          setcmt(cmtz)\n          console.log(\"returned users data object\", cmtz)\n          }\n        })\n      } else {\n         setSessionUser(false)\n         alert(\"You need to sign in to view this page\")\n         Navigate(\"/signIn\")\n      }\n    })\n  },[]);\n\n  function goToProfile (){\n    Navigate (\"/profile/\" + sessionUser + \"/home\")\n  }\n  \n  function Logout (){\n    localStorage.removeItem('jwt_token')\n    Navigate (\"/\")\n  }\n\n  async function getCmt (user2find) { // sends Username, password from input, then backend creates s3 bucket in Username and stores details on mongo\n  \n    let data = {Username: User}\n\n    let queryType\n\n    if (Page === \"All\") {\n       queryType = \"GetAllComments\"\n    } else {\n       queryType =\"GetUserComments\"\n    }\n\n\n    if (user2find) {\n       data.Username = sessionUser\n    }\n\n\n    let gqlRequest = \"query \" + queryType + \" ($Username: String!){  \" + queryType + \" (input: $Username) { Key ID Username Password Email Bio Profpic Photos LastCommentNum Posts { Username SessionUser MainCmt PostNum Time TimeStamp Date Comments { Username Comment Profpic } Likes { Username Profpic } } } }\"\n    let response = await SendData(gqlRequest, data)\n    if (response) {\n       return response.data[queryType] \n    }\n }\n\n\n  async function updateBio () { \n    \n    const bio = document.getElementById('bioBox').value\n\n    let variables = {data: {Username: User, Bio: bio}}\n\n    let gqlRequest = \"mutation UpdateBio ($data: UpdateBioInput!){ UpdateBio(input: $data) { Key ID Username Password Email Bio Profpic Photos LastCommentNum Posts { Username SessionUser MainCmt PostNum Time TimeStamp Date Comments { Username Comment Profpic } Likes { Username Profpic } } } }\"\n\t\t\n\t\tlet response = await SendData(gqlRequest, variables)\n\n\t\t\n\t\tif ( response ){ // if password is a match redirect to profile page\n\t\t\tconsole.log(\"saved bio\")\n      setcmt(response.data.UpdateBio) // store users data object\n      setDp(!dp) // show bio edit box\n\t\t} \n  }\n\n  async function addPhotos (event) {\n    if (event) {\n      let file = (event.target.files[0])\n      var data = new FormData() \n      data.append('file', file)\n      data.append('user', User)\n      data.append('type', 'addPhotos')\n    \n      let options = {\n        method: 'POST',\n        body: data, \n      }\n\n      let postUrl = process.env.REACT_APP_BACKEND_UPLOAD +  '/postfile/' + User \n      let response = await fetch(postUrl, options)\n      let convert = await response.json ()\n      if ( response.status === 401 || response.status === 400){\n        console.log(\"your pic didn't save, please try again\")\n       } else if ( response.status === 200){ \n        console.log(\"added pic to users photos\")\n        setcmt(convert)\n       }\n      \n    }\n  };\n\n  function triggerClick(event){ // clicking image triggers upload button click\n    var myButton = document.getElementById(event.target.name);\n    if ( myButton ) {\n      myButton.click()\n    }\n  }\n\n  async function addProfilePic (event) {\n    if (event) {\n      let file = (event.target.files[0])\n      var data = new FormData() \n      data.append('file', file)\n      data.append('user', User)\n      data.append('type', 'profPic')\n    \n      let options = {\n        method: 'POST',\n        body: data, \n      }\n\n      let ProfUrl = process.env.REACT_APP_BACKEND_UPLOAD + '/postfile/' + User\n      let response = await fetch(ProfUrl, options)\n      let convert = await response.json ()\n      document.getElementById(\"profpic11\").src = convert.Profpic // get posted img address and change profile picture\n      \n    }\n  };\n\n  return (\n            <>\n              <span className=\"login100-form-title p-b-53\">\n                Create your profile\n              </span>\n                {/*  <!--profile pic--> */}\n                <div className=\"row\">\n                  <div class=\"col\"></div>\n                  <div class=\"col\"></div>\n                  <div class=\"col\"></div>\n                  <div class=\"col\"></div>\n                    <div className=\"col\" >\n                      <div className=\"profpics\">\n                        {cmt.Profpic ? <img className=\"profpics\" id= \"profpic11\" name=\"profpic1\"  onClick={(e)=>  {e.preventDefault(); triggerClick(e)}} alt=\"alt\" src={cmt.Profpic}  \n                          data-holder-Rendered=\"true\"/> \n                          :\n                          <img className=\"profpics\" id= \"profpic11\" name=\"profpic1\"  onClick={(e)=>  {e.preventDefault(); triggerClick(e)}} alt=\"alt\" src={bkpic}  \n                          data-holder-Rendered=\"true\"/>\n                        }\n                      </div>\n                    </div>\n                  <div className=\"visually-hidden\">\n                      <div>\n                            <input id=\"profpic1\" type=\"file\" className=\"blocked\" onChange={addProfilePic}  name= \"uploader1\"/>\n                      </div>\n                  </div>\n                    <div className=\"col-md-4 mb-3\" >\n                  </div>\n                  <div className=\"visually-hidden\"></div>\n                </div>    \n              <div className=\"w-full text-center p-t-55\">\n              <a href=\"!\" className=\"btn btn-sm btn-info mb-2\" style={{marginRight:\"10px\"}} onClick={(e) => {e.preventDefault(); goToProfile()}}>View Profile</a>\n              <a href=\"!\" className=\"btn btn-sm btn-info mb-2\" onClick={(e) => {e.preventDefault(); Logout()}}>Log Out</a>\n              </div>               \n              <div className=\"p-t-13 p-b-9\"></div>\n              <div className=\"wrap-input100 validate-input\">{cmt.Bio ? cmt.Bio : \"You haven't added a bio yet. Click to add one now!\"}</div>\n              <a href=\"!\" className=\"btn btn-sm btn-info mb-2\" style={{marginTop: \"10px\"}} onClick={(e) => {e.preventDefault(); setDp(!dp)}}>Edit Bio</a>\n              {dp && \n              <>\n                <div className=\"wrap-input100 validate-input\" style={{ display: dp }}>\n                  ​<span className=\"txt10\">\n                    Max 70 characters\n                  </span> \n                  <span><textarea maxLength=\"70\" id=\"bioBox\" rows=\"10\" cols=\"10\"></textarea></span>\n                </div>\n                <div className=\"container-login100-form-btn m-t-17\">\n                  <button className=\"login100-form-btn\" type=\"button\" onClick={(e) =>{e.preventDefault(); updateBio()}}>\n                    Save Changes\n                  </button>\n                </div>\n              </>\n              }\n              {sessionUser === User &&\n              <div className=\"w-full text-center p-t-55\">\n                <div className=\"connected-container\">\n                  <div className=\"gif-grid\">\n                  {/* map through users images */}\n                      {cmt.Photos.map((pic) => (\n                        <div className=\"gif-item\" key={pic}>\n                            <img src={pic} alt={pic} />\n                        </div>\n                      ))}\n                  </div>\n                </div>\n              </div>\n              }\n              <div>\n                <a href=\"!\" className=\"btn btn-sm btn-info mb-2\" name=\"mediaUplaod\" style={{marginTop: \"10px\"}} onClick={(e) => {e.preventDefault(); triggerClick(e)}}>Add Photos</a>\n              </div>  \n              <div>\n                  <input id=\"mediaUplaod\" type=\"file\" className=\"blocked\" onChange={(e)=> addPhotos(e)}  name= \"uploader1\"/>\n              </div>\n              <div>\n              </div>\n            </>\n          )\n}","/home/andru/go/src/github.com/andru100/Social-Network-Microservice/Frontend-React/src/routes/Profile.jsx",["100"],[],"import { React, memo } from \"react\";\nimport { useState, useEffect } from \"react\"\nimport { useNavigate, useParams } from \"react-router\";\nimport ChkAuth from './chkAuth';\nimport SendData from './SendData';\n\nfunction Home () {\n   const [sessionUser, setSessionUser] = useState (\"\")\n   const[cmt, setcmt] = useState({Posts:[], Photos: []}) // holds users data object\n   const [viewReply, setviewReply] = useState(false); // use to show comments when clicked\n   const [viewLikes, setviewLikes] = useState(false); // use to show likes when clicked\n   const Navigate = useNavigate();\n   var {User, Page,} = useParams()\n\n   let Today = new Date().toLocaleDateString()\n\n  useEffect( () => {\n    ChkAuth().then(user => {\n      if (user) {\n         setSessionUser(user)\n         getCmt().then(cmtz => {\n            if (cmtz) {\n             setcmt(cmtz)\n             console.log(\"Users data object retrieved is:\", cmtz)\n            }\n         })\n      } else {\n         setSessionUser(false)\n         alert(\"You need to sign in to view this page\")\n         Navigate(\"/signIn\")\n      }\n    })\n  },[Navigate]);\n\n\n   async function getCmt (user2find) { // sends username, password from input, then backend creates s3 bucket in username and stores details on mongo\n  \n      let data = {Username: User}\n\n      let queryType\n\n      if (Page === \"All\") {\n         queryType = \"GetAllComments\"\n      } else {\n         queryType =\"GetUserComments\"\n      }\n\n      if (user2find) {\n         data.Username = sessionUser\n      }\n\n      let gqlRequest = \"query \" + queryType + \" ($Username: String!){  \" + queryType + \" (input: $Username) { Key ID Username Password Email Bio Profpic Photos LastCommentNum Posts { Username SessionUser MainCmt PostNum Time TimeStamp Date Comments { Username Comment Profpic } Likes { Username Profpic } } } }\"\n      let response = await SendData(gqlRequest, data)\n      if (response) {\n         return response.data[queryType] \n      }\n   }\n\n\n   async function sendCmt (msgType, cmtAuthr, iD) { // sends comments, replies to comments and likes\n      let cmt = \"\" //in case msgType is reply and comment box not shown so causes null error\n      if (msgType === \"isCmt\") {\n         cmt = document.getElementById(\"cmt\").value \n      }   \n\n      if (msgType === \"isCmt\") {\n         let NewCmtInput  = { data: {\n            Username : cmtAuthr,\n            SessionUser: sessionUser,\n            MainCmt : cmt ,\n            Time : new Date().toLocaleTimeString('en-GB', { hour: \"numeric\", minute: \"numeric\"}),\n            Date : Today,\n            TimeStamp : Date.now(),    \n            ReturnPage: Page   ,\n            }\n         }\n\n         let gqlRequest = \"mutation NewComment ($data: SendCmtInput!){ NewComment (input: $data) { Key ID Username Password Email Bio Profpic Photos LastCommentNum Posts { Username SessionUser MainCmt PostNum Time TimeStamp Date Comments { Username Comment Profpic } Likes { Username Profpic } } } }\"\n         \n         SendData(gqlRequest, NewCmtInput).then((response)=> response ? setcmt(response.data.NewComment) :  console.log(\"error posting new comment\") ); \n      }\n      \n\n      if (msgType === \"isResponse\") {\n         let CommentResponse =  { data: {\n            AuthorUsername: cmtAuthr ,\n            ReplyUsername: sessionUser ,\n            ReplyComment:  document.getElementById(iD).value , \n            ReplyProfpic:  \"\" ,\n            PostIndx:   iD ,\n            ReturnPage: Page\n            }\n         }\n\n         let gqlRequest = \"mutation ReplyComment ($data: ReplyCommentInput!){ ReplyComment (input: $data) { Key ID Username Password Email Bio Profpic Photos LastCommentNum Posts { Username SessionUser MainCmt PostNum Time TimeStamp Date Comments { Username Comment Profpic } Likes { Username Profpic } } } }\"\n         const reply = await getCmt(sessionUser)\n         CommentResponse.data.ReplyProfpic = reply.Profpic\n         \n         SendData(gqlRequest, CommentResponse).then((response)=> response ? setcmt(response.data.ReplyComment) :  console.log(\"error sending response to comment\") )\n      }\n\n\n      if (msgType === \"cmtLiked\") {\n         let SendLikeInput  = { data: {\n            Username:   cmtAuthr ,\n            LikedBy:   sessionUser ,\n            LikeByPic:   \"\",\n            PostIndx:   iD , \n            ReturnPage: Page   \n            }\n         }\n         let gqlRequest = \"mutation LikeComment ($data: SendLikeInput!){ LikeComment (input: $data) { Key ID Username Password Email Bio Profpic Photos LastCommentNum Posts { Username SessionUser MainCmt PostNum Time TimeStamp Date Comments { Username Comment Profpic } Likes { Username Profpic } } } }\"\n         getCmt(sessionUser).then((repliersData)=> {SendLikeInput.data.LikeByPic = repliersData.Profpic; SendData(gqlRequest, SendLikeInput).then((response)=> response ? setcmt(response.data.LikeComment) :  console.log(\"error when sending comment like\") ); })\n      }\n\n   }\n\n   function redirecter () {\n      Navigate(\"/signIn\")\n   }\n\n   function EditProfile (){\n      Navigate (\"/editProfile/\"+sessionUser)\n    }\n\n    function goToProfile (){\n      Navigate (\"/Profile/\" + User + \"/home\")\n    }\n\n    function goToAllPosts (){\n      Navigate (\"/profile/\" + User + \"/all\")\n    }\n\n    function goToPhotos () {\n       if (Page !== \"media\") { // for when your on media tab already\n         Navigate(\"/profile/\" + User + \"/media\")\n       }\n    }\n\n    function Logout (){\n      localStorage.removeItem('jwt_token')\n      Navigate (\"/\")\n    }\n\n\n\nreturn (\n       \n<div className=\"container\">\n   <div className=\"row\">\n      <div className=\"col-md-12\">\n         <div id=\"content\" className=\"content content-full-width\">\n            {/* begin profile */}\n            <div className=\"profile\">\n               <div className=\"profile-header\">\n                  <div className=\"profile-header-cover\"></div>\n                  <div className=\"profile-header-content\">\n                     <div className=\"profile-header-img\">\n                        <img calssName=\"profpics\" src={cmt.Profpic} alt=\"\"/>\n                     </div>\n                     <div className=\"profile-header-info\">\n                        <h4 className=\"m-t-10 m-b-5\">{User}</h4>\n                        <p className=\"m-b-10\" style={{color:\"black\"}}>{cmt.Bio? cmt.Bio : \"Click the edit profile button to add a bio to your profile now.\"}</p>\n                        <a href=\"!\" className=\"btn btn-sm btn-info mb-2\" style={{marginRight:\"10px\"}} onClick={(e)=> {e.preventDefault() ; EditProfile()}}>Edit Profile</a>\n                        <a href=\"!\" className=\"btn btn-sm btn-info mb-2\" onClick={(e)=> {e.preventDefault(); Logout()}}>Log Out</a>\n                     </div>\n                  </div>\n                  {/* Navigation tabs */}\n                  <ul className=\"profile-header-tab nav nav-tabs\">\n                      {Page === \"x\" ? <li className=\"nav-item\"><a href=\"!\" className=\"nav-link active show\" data-toggle=\"tab\" onClick={(e) => { e.preventDefault() ; goToProfile()}}>PROFILE</a></li>: <li className=\"nav-item\"><a href=\"!\" className=\"nav-link\" data-toggle=\"tab\" onClick={(e) => {e.preventDefault(); goToProfile()}}>PROFILE</a></li>} \n                      {Page === \"all\" ? <li className=\"nav-item\"><a href=\"!\" className=\"nav-link active show\" data-toggle=\"tab\" onClick={(e) => {e.preventDefault(); goToAllPosts()}}>FEED</a></li>: <li className=\"nav-item\"><a href=\"!\" className=\"nav-link\" data-toggle=\"tab\" onClick={(e) => {e.preventDefault() ; goToAllPosts()}}>FEED</a></li>} \n                      {Page === \"media\" ? <li className=\"nav-item\"><a href=\"!\" className=\"nav-link active show\" data-toggle=\"tab\" onClick={(e) => {e.preventDefault(); goToPhotos()}}>MEDIA</a></li>: <li className=\"nav-item\"><a href=\"!\" className=\"nav-link\" data-toggle=\"tab\" onClick={(e) => {e.preventDefault() ; goToPhotos()}}>MEDIA</a></li>} \n                      {Page === \"friends\" ? <li className=\"nav-item\"><a href=\"!\" className=\"nav-link active show\" data-toggle=\"tab\">MEDIA</a></li>: <li className=\"nav-item\"><a href=\"!\" className=\"nav-link\" data-toggle=\"tab\" onClick={() => {}}>FRIENDS</a></li>} \n                  </ul>\n               </div>\n            </div>\n            {/*show media page */}\n            {sessionUser && Page === \"media\" ? \n            <div className=\"connected-container\">\n               <div className=\"gif-grid\">\n                  {cmt.Photos.map((pic) => (\n                     <div className=\"gif-item\" key={pic}>\n                        <img src={pic} alt={pic} />\n                     </div>\n                  ))}\n               </div>\n            </div>\n            : \n            <div></div>}\n            {/*render users profile page or news feed showing all comments*/}\n            {(sessionUser === User && Page !== \"media\") || (sessionUser && Page === \"all\") ? <div className=\"input\">\n                     <form action=\"\">\n                        <div className=\"input-group\">\n                           <textarea style={{height: \"36px\"}} type=\"text\" className=\"form-control rounded-corner\" id=\"cmt\" placeholder=\"Write a comment...\"/>\n                           <span className=\"input-group-btn p-l-10\">\n                              <button className=\"btn btn-primary f-s-12 rounded-corner\" type=\"button\" onClick={() => sendCmt(\"isCmt\", sessionUser, 0)}>Comment</button>\n                           </span>\n                        </div>\n                  </form>\n              </div> : <div></div>}\n            <div className=\"profile-content\">\n               <div className=\"tab-content p-0\">\n                  <div className=\"tab-pane fade active show\" id=\"profile-post\">\n                     <ul className=\"timeline\">\n                     { Page !== \"media\" ? \n                        cmt.Posts.map((userData)=> (\n                           <li>\n                           <div className=\"timeline-time\">\n                              <span className=\"date\">{userData.Date === Today ? \"Today\" : userData.Date}</span>\n                              <span className=\"time\">{userData.Time}</span>\n                           </div>\n                           <div className=\"timeline-icon\">\n                              <a href=\"!\">&nbsp;</a>\n                           </div>\n                           <div className=\"timeline-body\">\n                              <div className=\"timeline-header\">\n                                 <span className=\"userimage\"><img src={cmt.Profpic} alt=\"\"/></span>\n                                 <a className=\"username\" href= {process.env.REACT_APP_FRONTEND + \"/Profile/\" + userData.Username + \"/home\"}>{userData.Username}</a>\n                              </div>\n                              <div className=\"timeline-content\">\n                                 <p>\n                                    {userData.MainCmt}\n                                 </p>\n                              </div>\n                              <div className=\"timeline-likes\">\n                                 <div className=\"stats-left\">\n                                    <span className=\"fa-stack fa-fw stats-icon\">\n                                    <i className=\"fa fa-circle fa-stack-2x text-danger\"></i>\n                                    <i className=\"fa fa-heart fa-stack-1x fa-inverse t-plus-1\" onClick={()=>sendCmt(\"cmtLiked\", userData.Username, userData.PostNum)}></i>\n                                    </span>\n                                    <span className=\"stats-text\" onClick={() => {viewReply && setviewReply(!viewReply) ; setviewLikes(!viewLikes)}}>{userData.Likes?.length} Likes</span>\n                                    <span className=\"stats-text\" onClick={() => {viewLikes && setviewLikes(!viewLikes) ; setviewReply(!viewReply)}}>{userData.Comments?.length} Comments</span>\n                                    {viewLikes &&\n                                      userData.Likes.map((Likes)=> (\n                                          <div className=\"timeline-header\">\n                                          {<span className=\"userimage\"><img src={Likes.Profpic} alt=\"\"/></span>  }\n                                          <a ClassName = \"username\" href= {process.env.REACT_APP_FRONTEND + \"/Profile/\" + Likes.Username + \"/home\"}>{Likes.Username}</a> \n                                          </div> \n                                      ))\n                                    } \n                                    {viewReply &&\n                                      userData.Comments.map((replys)=> (\n                                       <div className=\"timeline-header\">\n                                          {<span className=\"userimage\"><img src={replys.Profpic} alt=\"\"/></span> }\n                                          <span ><a href= {process.env.REACT_APP_FRONTEND + \"/Profile/\" + replys.Username + \"/home\"}>{replys.Username}</a> <small></small></span>\n                                          <div>\n                                             <span>{replys.Comment}</span>\n                                          </div>\n                                       </div>\n                                      ))\n                                    } \n                                 </div>\n                                 <div className=\"stats\">\n                                 </div>\n                              </div>\n                              <div className=\"timeline-comment-box\">\n                                 <div className=\"input\">\n                                    <form action=\"\">\n                                       {sessionUser ? \n                                          <div className=\"input-group\">\n                                          <textarea type=\"text\" className=\"form-control rounded-corner\" id={userData.PostNum} style={{height:\"90px\", width:\"180px\"}} placeholder=\"Reply to the post...\"/>\n                                          <div style={{height:\"10px\", width:\"180px\"}}></div>\n                                          <span className=\"input-group-btn p-l-10\">\n                                             <button className=\"btn btn-primary f-s-12 rounded-corner\" type=\"button\"  onClick={()=>sendCmt(\"isResponse\", userData.Username, userData.PostNum)}>Comment</button>\n                                          </span>\n                                          </div>\n                                          :\n                                          <div className=\"input-group\">\n                                          <input type=\"text\" className=\"form-control rounded-corner\" id={userData.PostNum} placeholder=\"Write a comment...\"/>\n                                          <span className=\"input-group-btn p-l-10\">\n                                             <button className=\"btn btn-primary f-s-12 rounded-corner\" type=\"button\" onClick={()=>redirecter()} >Sign In to Commment</button>\n                                          </span>\n                                          </div>}\n                                    </form>\n                                 </div>\n                              </div>\n                           </div>\n                        </li>\n                        ))\n                        : \n                         <div></div>\n                     }\n                     </ul>\n                  </div>\n               </div>\n            </div>\n         </div>\n      </div>\n   </div>\n</div>\n    )\n}\n\nexport default memo(Home)","/home/andru/go/src/github.com/andru100/Social-Network-Microservice/Frontend-React/src/routes/SignIn.jsx",["101"],[],"import React from 'react';\nimport { useEffect } from \"react\";\nimport { useNavigate, Link } from 'react-router-dom';\nimport ChkAuth from './chkAuth';\nimport Google from '../images/icons/icon-google.png'\nimport SendData from './SendData';\n\nexport default function RenderSignin () {\n\n\tconst Navigate = useNavigate();\n\n\tuseEffect( () => { //check if signed in and go to profile page\n\t\tChkAuth().then(user => {\n\t\t  if (user) {\n\t\t  Navigate(\"/profile/\" + user + \"/home\")\n\t\t  } \n\t\t})\n\t},[]);\n\n\t\n\tasync function signin(){ // Sign in, check password, get token\n\t\t\n\t\tconst username = document.getElementById('username').value;\n\t\tconst password = document.getElementById('pass').value;\n\t\t\t\n\t\tlet signindata = {data: {\n\t\t\tUsername: username,\n\t\t\tPassword: password\n\t\t\t}\n\t\t}\n\n\t\tlet gqlRequest = \"mutation SignIn ($data: UsrsigninInput!){ SignIn(input: $data) { Token } }\"\n\t\t\n\t\tlet response = await SendData(gqlRequest, signindata, 'signin')\n\n\t\t\n\t\tif ( response ){ // if password is a match redirect to profile page\n\t\t\tlocalStorage.setItem('jwt_token', response.data.SignIn.Token) // Store JWT in storage\n\t\t\tNavigate (\"/Profile/\" + username + \"/home\")\n\t\t} \n\t\t\n\t\t\n\t}\n\t\n  return (  \n    <>\n      <span className=\"login100-form-title p-b-53\">\n\t\t\t\t\t\tSign In With\n\t\t\t\t\t</span>\n\t\t\t\t\t<a href=\"/#\" className=\"btn-face m-b-20\">\n\t\t\t\t\t\t<i className=\"fa fa-facebook-official\"></i>\n\t\t\t\t\t\tFacebook\n\t\t\t\t\t</a>\n\t\t\t\t\t<a href=\"/#\" className=\"btn-google m-b-20\">\n\t\t\t\t\t\t<img src={Google} alt=\"GOOGLE\" />\n\t\t\t\t\t\tGoogle\n\t\t\t\t\t</a>\n\t\t\t\t\t<div className=\"p-t-31 p-b-9\">\n\t\t\t\t\t\t<span className=\"txt1\">\n\t\t\t\t\t\t\tUsername\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"wrap-input100 validate-input\" data-validate = \"Username is required\">\n\t\t\t\t\t\t<input className=\"input100\" type=\"text\" name=\"username\" id=\"username\"/>\n\t\t\t\t\t\t<span className=\"focus-input100\"></span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"p-t-13 p-b-9\">\n\t\t\t\t\t\t<span className=\"txt1\">\n\t\t\t\t\t\t\tPassword\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t{/* <a href=\"/\" className=\"txt2 bo1 m-l-5\">\n\t\t\t\t\t\t\tForgot?\n\t\t\t\t\t\t</a> */}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"wrap-input100 validate-input\" data-validate = \"Password is required\">\n\t\t\t\t\t\t<input className=\"input100\" type=\"password\" name=\"pass\" id=\"pass\" />\n\t\t\t\t\t\t<span className=\"focus-input100\"></span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"container-login100-form-btn m-t-17\">\n\t\t\t\t\t\t<button className=\"login100-form-btn\" type=\"button\" onClick={signin}>\n\t\t\t\t\t\t\tSign In\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"w-full text-center p-t-55\">\n\t\t\t\t\t\t<span className=\"txt2\" style={{marginRight:\"10px\", color:\"black\"}}>\n\t\t\t\t\t\t\tNot a member?\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<Link to=\"/signUp\">Sign up now</Link>\n\t\t\t\t\t</div>\n    </>\n  )\n};","/home/andru/go/src/github.com/andru100/Social-Network-Microservice/Frontend-React/src/routes/SignUp.jsx",[],[],"/home/andru/go/src/github.com/andru100/Social-Network-Microservice/Frontend-React/src/routes/chkAuth.jsx",[],[],"/home/andru/go/src/github.com/andru100/Social-Network-Microservice/Frontend-React/src/routes/SendData.jsx",[],[],{"ruleId":"102","severity":1,"message":"103","line":31,"column":5,"nodeType":"104","endLine":31,"endColumn":7,"suggestions":"105"},{"ruleId":"102","severity":1,"message":"106","line":33,"column":5,"nodeType":"104","endLine":33,"endColumn":15,"suggestions":"107"},{"ruleId":"102","severity":1,"message":"108","line":18,"column":4,"nodeType":"104","endLine":18,"endColumn":6,"suggestions":"109"},{"ruleId":"102","severity":1,"message":"103","line":31,"column":5,"nodeType":"104","endLine":31,"endColumn":7,"suggestions":"110"},{"ruleId":"102","severity":1,"message":"106","line":33,"column":5,"nodeType":"104","endLine":33,"endColumn":15,"suggestions":"111"},{"ruleId":"102","severity":1,"message":"108","line":18,"column":4,"nodeType":"104","endLine":18,"endColumn":6,"suggestions":"112"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'Navigate' and 'getCmt'. Either include them or remove the dependency array.","ArrayExpression",["113"],"React Hook useEffect has a missing dependency: 'getCmt'. Either include it or remove the dependency array.",["114"],"React Hook useEffect has a missing dependency: 'Navigate'. Either include it or remove the dependency array.",["115"],["116"],["117"],["118"],{"desc":"119","fix":"120"},{"desc":"119","fix":"121"},{"desc":"122","fix":"123"},{"desc":"119","fix":"124"},{"desc":"119","fix":"125"},{"desc":"122","fix":"126"},"Update the dependencies array to be: [Navigate, getCmt]",{"range":"127","text":"128"},{"range":"129","text":"128"},"Update the dependencies array to be: [Navigate]",{"range":"130","text":"131"},{"range":"132","text":"128"},{"range":"133","text":"128"},{"range":"134","text":"131"},[919,921],"[Navigate, getCmt]",[1084,1094],[480,482],"[Navigate]",[919,921],[1084,1094],[480,482]]